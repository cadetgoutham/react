{"ast":null,"code":"var _jsxFileName = \"/home/vvdn/React-practice/hello/src/App.js\";\nimport React, { Component } from \"react\";\n// import { render } from \"react-dom\";\nimport { AgGridReact } from 'ag-grid-react';\nimport { ClientSideRowModelModule } from \"ag-grid-community\";\nimport { RangeSelectionModule } from \"ag-grid-enterprise\";\nimport 'ag-grid-community/styles//ag-grid.css';\nimport 'ag-grid-community/styles//ag-theme-alpine.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction actionCellRenderer(params) {\n  let eGui = document.createElement(\"div\");\n  let editingCells = params.api.getEditingCells();\n  console.log(editingCells);\n  // checks if the rowIndex matches in at least one of the editing cells\n  let isCurrentRowEditing = editingCells.some(cell => {\n    console.log(cell.rowIndex);\n    return cell.rowIndex === params.node.rowIndex;\n  });\n  if (isCurrentRowEditing) {\n    eGui.innerHTML = `\n<button  class=\"action-button update\"  data-action=\"update\"> update  </button>\n<button  class=\"action-button cancel\"  data-action=\"cancel\" > cancel </button>\n`;\n  } else {\n    eGui.innerHTML = `\n<button class=\"action-button edit\"  data-action=\"edit\" > edit  </button>\n<button class=\"action-button delete\" data-action=\"delete\" > delete </button>\n`;\n  }\n  return eGui;\n}\nexport default class GridExample extends Component {\n  constructor(props) {\n    super(props);\n    this.onGridReady = params => {\n      this.gridApi = params.api;\n      this.gridColumnApi = params.columnApi;\n      const httpRequest = new XMLHttpRequest();\n      const updateData = data => {\n        this.setState({\n          rowData: data\n        });\n      };\n      httpRequest.open(\"GET\", \"https://www.ag-grid.com/example-assets/olympic-winners.json\");\n      httpRequest.send();\n      httpRequest.onreadystatechange = () => {\n        if (httpRequest.readyState === 4 && httpRequest.status === 200) {\n          updateData(JSON.parse(httpRequest.responseText));\n        }\n      };\n    };\n    this.state = {\n      modules: [ClientSideRowModelModule, RangeSelectionModule],\n      columnDefs: [{\n        field: \"athlete\",\n        minWidth: 150\n      }, {\n        field: \"age\",\n        maxWidth: 90\n      }, {\n        headerName: \"action\",\n        minWidth: 150,\n        cellRenderer: actionCellRenderer,\n        editable: false,\n        colId: \"action\"\n      }],\n      defaultColDef: {\n        editable: true\n      },\n      rowData: null\n    };\n  }\n  onCellClicked(params) {\n    // Handle click event for action cells\n    if (params.column.colId === \"action\" && params.event.target.dataset.action) {\n      let action = params.event.target.dataset.action;\n      if (action === \"edit\") {\n        params.api.startEditingCell({\n          rowIndex: params.node.rowIndex,\n          // gets the first columnKey\n          colKey: params.columnApi.getDisplayedCenterColumns()[0].colId\n        });\n      }\n      if (action === \"delete\") {\n        params.api.applyTransaction({\n          remove: [params.node.data]\n        });\n      }\n      if (action === \"update\") {\n        params.api.stopEditing(false);\n      }\n      if (action === \"cancel\") {\n        params.api.stopEditing(true);\n      }\n    }\n  }\n  onRowEditingStarted(params) {\n    params.api.refreshCells({\n      columns: [\"action\"],\n      rowNodes: [params.node],\n      force: true\n    });\n  }\n  onRowEditingStopped(params) {\n    params.api.refreshCells({\n      columns: [\"action\"],\n      rowNodes: [params.node],\n      force: true\n    });\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        width: \"100%\",\n        height: \"100%\"\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"myGrid\",\n        style: {\n          height: \"600px\",\n          width: \"100%\"\n        },\n        className: \"ag-theme-alpine\",\n        children: /*#__PURE__*/_jsxDEV(AgGridReact, {\n          onRowEditingStopped: this.onRowEditingStopped,\n          onRowEditingStarted: this.onRowEditingStarted,\n          onCellClicked: this.onCellClicked,\n          editType: \"fullRow\",\n          suppressClickEdit: true,\n          modules: this.state.modules,\n          columnDefs: this.state.columnDefs,\n          defaultColDef: this.state.defaultColDef,\n          enableRangeSelection: true,\n          onGridReady: this.onGridReady,\n          rowData: this.state.rowData\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }, this);\n  }\n}","map":{"version":3,"names":["React","Component","AgGridReact","ClientSideRowModelModule","RangeSelectionModule","jsxDEV","_jsxDEV","actionCellRenderer","params","eGui","document","createElement","editingCells","api","getEditingCells","console","log","isCurrentRowEditing","some","cell","rowIndex","node","innerHTML","GridExample","constructor","props","onGridReady","gridApi","gridColumnApi","columnApi","httpRequest","XMLHttpRequest","updateData","data","setState","rowData","open","send","onreadystatechange","readyState","status","JSON","parse","responseText","state","modules","columnDefs","field","minWidth","maxWidth","headerName","cellRenderer","editable","colId","defaultColDef","onCellClicked","column","event","target","dataset","action","startEditingCell","colKey","getDisplayedCenterColumns","applyTransaction","remove","stopEditing","onRowEditingStarted","refreshCells","columns","rowNodes","force","onRowEditingStopped","render","style","width","height","children","id","className","editType","suppressClickEdit","enableRangeSelection","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["/home/vvdn/React-practice/hello/src/App.js"],"sourcesContent":["import React, { Component } from \"react\";\n// import { render } from \"react-dom\";\nimport {AgGridReact} from 'ag-grid-react'\nimport { ClientSideRowModelModule } from \"ag-grid-community\";\nimport { RangeSelectionModule } from \"ag-grid-enterprise\";\nimport 'ag-grid-community/styles//ag-grid.css';\nimport 'ag-grid-community/styles//ag-theme-alpine.css';\n\nfunction actionCellRenderer(params) {\n  let eGui = document.createElement(\"div\");\n\n  let editingCells = params.api.getEditingCells();\n  console.log(editingCells)\n  // checks if the rowIndex matches in at least one of the editing cells\n  let isCurrentRowEditing = editingCells.some((cell) => {\n    console.log(cell.rowIndex);\n    return cell.rowIndex === params.node.rowIndex;\n  });\n\n  if (isCurrentRowEditing) {\n    eGui.innerHTML = `\n<button  class=\"action-button update\"  data-action=\"update\"> update  </button>\n<button  class=\"action-button cancel\"  data-action=\"cancel\" > cancel </button>\n`;\n  } else {\n    eGui.innerHTML = `\n<button class=\"action-button edit\"  data-action=\"edit\" > edit  </button>\n<button class=\"action-button delete\" data-action=\"delete\" > delete </button>\n`;\n  }\n\n  return eGui;\n}\n\nexport default class GridExample extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      modules: [ClientSideRowModelModule, RangeSelectionModule],\n      columnDefs: [\n        { field: \"athlete\", minWidth: 150 },\n        { field: \"age\", maxWidth: 90 },\n        {\n          headerName: \"action\",\n          minWidth: 150,\n          cellRenderer: actionCellRenderer,\n          editable: false,\n          colId: \"action\"\n        }\n      ],\n      defaultColDef: {\n        editable: true\n      },\n      rowData: null\n    };\n  }\n\n  onGridReady = (params) => {\n    this.gridApi = params.api;\n    this.gridColumnApi = params.columnApi;\n\n    const httpRequest = new XMLHttpRequest();\n    const updateData = (data) => {\n      this.setState({ rowData: data });\n    };\n\n    httpRequest.open(\"GET\", \"https://www.ag-grid.com/example-assets/olympic-winners.json\");\n    httpRequest.send();\n    httpRequest.onreadystatechange = () => {\n      if (httpRequest.readyState === 4 && httpRequest.status === 200) {\n        updateData(JSON.parse(httpRequest.responseText));\n      }\n    };\n  };\n\n  onCellClicked(params) {\n    // Handle click event for action cells\n    if (params.column.colId === \"action\" && params.event.target.dataset.action) {\n      let action = params.event.target.dataset.action;\n\n      if (action === \"edit\") {\n        params.api.startEditingCell({\n          rowIndex: params.node.rowIndex,\n          // gets the first columnKey\n          colKey: params.columnApi.getDisplayedCenterColumns()[0].colId\n        });\n      }\n\n      if (action === \"delete\") {\n        params.api.applyTransaction({\n          remove: [params.node.data]\n        });\n      }\n\n      if (action === \"update\") {\n        params.api.stopEditing(false);\n      }\n\n      if (action === \"cancel\") {\n        params.api.stopEditing(true);\n      }\n    }\n  }\n\n  onRowEditingStarted(params) {\n    params.api.refreshCells({\n      columns: [\"action\"],\n      rowNodes: [params.node],\n      force: true\n    });\n  }\n  onRowEditingStopped(params) {\n    params.api.refreshCells({\n      columns: [\"action\"],\n      rowNodes: [params.node],\n      force: true\n    });\n  }\n\n  render() {\n    return (\n      <div style={{ width: \"100%\", height: \"100%\" }}>\n        <div\n          id=\"myGrid\"\n          style={{\n            height: \"600px\",\n            width: \"100%\"\n          }}\n          className=\"ag-theme-alpine\"\n        >\n          <AgGridReact\n            onRowEditingStopped={this.onRowEditingStopped}\n            onRowEditingStarted={this.onRowEditingStarted}\n            onCellClicked={this.onCellClicked}\n            editType=\"fullRow\"\n            suppressClickEdit={true}\n            modules={this.state.modules}\n            columnDefs={this.state.columnDefs}\n            defaultColDef={this.state.defaultColDef}\n            enableRangeSelection={true}\n            onGridReady={this.onGridReady}\n            rowData={this.state.rowData}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}