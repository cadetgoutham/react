{"ast":null,"code":"// ag-grid-react v30.0.4\nimport { _, CssClassManager } from 'ag-grid-community';\nimport React, { useCallback, useEffect, useRef, useState, useMemo, memo, useContext, useLayoutEffect } from 'react';\nimport { isComponentStateless } from '../utils.mjs';\nimport PopupEditorComp from './popupEditorComp.mjs';\nimport useJsCellRenderer from './showJsRenderer.mjs';\nimport { BeansContext } from '../beansContext.mjs';\nimport { createSyncJsComp } from '../jsComp.mjs';\nimport { useLayoutEffectOnce } from '../useEffectOnce.mjs';\nexport var CellCompState;\n(function (CellCompState) {\n  CellCompState[CellCompState[\"ShowValue\"] = 0] = \"ShowValue\";\n  CellCompState[CellCompState[\"EditValue\"] = 1] = \"EditValue\";\n})(CellCompState || (CellCompState = {}));\nconst checkCellEditorDeprecations = (popup, cellEditor, cellCtrl) => {\n  const col = cellCtrl.getColumn();\n  // cellEditor is written to be a popup editor, however colDef.cellEditorPopup is not set\n  if (!popup && cellEditor.isPopup && cellEditor.isPopup()) {\n    const msg = `AG Grid: Found an issue in column ${col.getColId()}. If using React, specify an editor is a popup using colDef.cellEditorPopup=true. AG Grid React cannot depend on the editor component specifying if it's in a popup (via the isPopup() method on the editor), as React needs to know this information BEFORE the component is created.`;\n    _.doOnce(() => console.warn(msg), 'jsEditorComp-isPopup-' + cellCtrl.getColumn().getColId());\n  }\n  // cellEditor is a popup and is trying to position itself the deprecated way\n  if (popup && cellEditor.getPopupPosition && cellEditor.getPopupPosition() != null) {\n    const msg = `AG Grid: Found an issue in column ${col.getColId()}. If using React, specify an editor popup position using colDef.cellEditorPopupPosition=true. AG Grid React cannot depend on the editor component specifying it's position (via the getPopupPosition() method on the editor), as React needs to know this information BEFORE the component is created.`;\n    _.doOnce(() => console.warn(msg), 'jsEditorComp-getPopupPosition-' + cellCtrl.getColumn().getColId());\n  }\n};\nconst jsxEditValue = (editDetails, setInlineCellEditorRef, setPopupCellEditorRef, eGui, cellCtrl, jsEditorComp) => {\n  const compDetails = editDetails.compDetails;\n  const CellEditorClass = compDetails.componentClass;\n  const reactInlineEditor = compDetails.componentFromFramework && !editDetails.popup;\n  const reactPopupEditor = compDetails.componentFromFramework && editDetails.popup;\n  const jsPopupEditor = !compDetails.componentFromFramework && editDetails.popup;\n  return React.createElement(React.Fragment, null, reactInlineEditor && React.createElement(CellEditorClass, Object.assign({}, editDetails.compDetails.params, {\n    ref: setInlineCellEditorRef\n  })), reactPopupEditor && React.createElement(PopupEditorComp, {\n    editDetails: editDetails,\n    cellCtrl: cellCtrl,\n    eParentCell: eGui,\n    wrappedContent: React.createElement(CellEditorClass, Object.assign({}, editDetails.compDetails.params, {\n      ref: setPopupCellEditorRef\n    }))\n  }), jsPopupEditor && jsEditorComp && React.createElement(PopupEditorComp, {\n    editDetails: editDetails,\n    cellCtrl: cellCtrl,\n    eParentCell: eGui,\n    jsChildComp: jsEditorComp\n  }));\n};\nconst jsxShowValue = (showDetails, key, parentId, cellRendererRef, showCellWrapper, reactCellRendererStateless, setECellValue) => {\n  const {\n    compDetails,\n    value\n  } = showDetails;\n  const noCellRenderer = !compDetails;\n  const reactCellRenderer = compDetails && compDetails.componentFromFramework;\n  const CellRendererClass = compDetails && compDetails.componentClass;\n  // if we didn't do this, objects would cause React error. we depend on objects for things\n  // like the aggregation functions avg and count, which return objects and depend on toString()\n  // getting called.\n  const valueForNoCellRenderer = (value === null || value === void 0 ? void 0 : value.toString) ? value.toString() : value;\n  const bodyJsxFunc = () => React.createElement(React.Fragment, null, noCellRenderer && React.createElement(React.Fragment, null, valueForNoCellRenderer), reactCellRenderer && !reactCellRendererStateless && React.createElement(CellRendererClass, Object.assign({}, compDetails.params, {\n    key: key,\n    ref: cellRendererRef\n  })), reactCellRenderer && reactCellRendererStateless && React.createElement(CellRendererClass, Object.assign({}, compDetails.params, {\n    key: key\n  })));\n  return React.createElement(React.Fragment, null, showCellWrapper ? React.createElement(\"span\", {\n    role: \"presentation\",\n    id: `cell-${parentId}`,\n    className: \"ag-cell-value\",\n    ref: setECellValue\n  }, bodyJsxFunc()) : bodyJsxFunc());\n};\nconst CellComp = props => {\n  const {\n    context\n  } = useContext(BeansContext);\n  const {\n    cellCtrl,\n    printLayout,\n    editingRow\n  } = props;\n  const [renderDetails, setRenderDetails] = useState();\n  const [editDetails, setEditDetails] = useState();\n  const [renderKey, setRenderKey] = useState(1);\n  const [userStyles, setUserStyles] = useState();\n  const [tabIndex, setTabIndex] = useState();\n  const [role, setRole] = useState();\n  const [colId, setColId] = useState();\n  const [title, setTitle] = useState();\n  const [includeSelection, setIncludeSelection] = useState(false);\n  const [includeRowDrag, setIncludeRowDrag] = useState(false);\n  const [includeDndSource, setIncludeDndSource] = useState(false);\n  const [jsEditorComp, setJsEditorComp] = useState();\n  const forceWrapper = useMemo(() => cellCtrl.isForceWrapper(), []);\n  const eGui = useRef(null);\n  const cellRendererRef = useRef(null);\n  const jsCellRendererRef = useRef();\n  const cellEditorRef = useRef();\n  // when setting the ref, we also update the state item to force a re-render\n  const eCellWrapper = useRef();\n  const [cellWrapperVersion, setCellWrapperVersion] = useState(0);\n  const setCellWrapperRef = useCallback(ref => {\n    eCellWrapper.current = ref;\n    setCellWrapperVersion(v => v + 1);\n  }, []);\n  // when setting the ref, we also update the state item to force a re-render\n  const eCellValue = useRef();\n  const [cellValueVersion, setCellValueVersion] = useState(0);\n  const setCellValueRef = useCallback(ref => {\n    eCellValue.current = ref;\n    setCellValueVersion(v => v + 1);\n  }, []);\n  const showTools = renderDetails != null && (includeSelection || includeDndSource || includeRowDrag);\n  const showCellWrapper = forceWrapper || showTools;\n  const setCellEditorRef = useCallback((popup, cellEditor) => {\n    cellEditorRef.current = cellEditor;\n    if (cellEditor) {\n      checkCellEditorDeprecations(popup, cellEditor, cellCtrl);\n      const editingCancelledByUserComp = cellEditor.isCancelBeforeStart && cellEditor.isCancelBeforeStart();\n      if (editingCancelledByUserComp) {\n        // we cannot set state inside render, so hack is to do it in next VM turn\n        setTimeout(() => {\n          cellCtrl.stopEditing(true);\n          cellCtrl.focusCell(true);\n        });\n      }\n    }\n  }, []);\n  const setPopupCellEditorRef = useCallback(cellRenderer => setCellEditorRef(true, cellRenderer), []);\n  const setInlineCellEditorRef = useCallback(cellRenderer => setCellEditorRef(false, cellRenderer), []);\n  const cssClassManager = useMemo(() => new CssClassManager(() => eGui.current), []);\n  useJsCellRenderer(renderDetails, showCellWrapper, eCellValue.current, cellValueVersion, jsCellRendererRef, eGui);\n  // if RenderDetails changed, need to call refresh. This is not our preferred way (the preferred\n  // way for React is just allow the new props to propagate down to the React Cell Renderer)\n  // however we do this for backwards compatibility, as having refresh used to be supported.\n  const lastRenderDetails = useRef();\n  useLayoutEffect(() => {\n    const oldDetails = lastRenderDetails.current;\n    const newDetails = renderDetails;\n    lastRenderDetails.current = renderDetails;\n    // if not updating renderDetails, do nothing\n    if (oldDetails == null || oldDetails.compDetails == null || newDetails == null || newDetails.compDetails == null) {\n      return;\n    }\n    const oldCompDetails = oldDetails.compDetails;\n    const newCompDetails = newDetails.compDetails;\n    // if different Cell Renderer, then do nothing, as renderer will be recreated\n    if (oldCompDetails.componentClass != newCompDetails.componentClass) {\n      return;\n    }\n    // if no refresh method, do nothing\n    if (cellRendererRef.current == null || cellRendererRef.current.refresh == null) {\n      return;\n    }\n    const result = cellRendererRef.current.refresh(newCompDetails.params);\n    if (result != true) {\n      // increasing the render key forces the refresh. this is undocumented (for React users,\n      // we don't document the refresh method, instead we tell them to act on new params).\n      // however the GroupCellRenderer has this logic in it and would need a small refactor\n      // to get it working without using refresh() returning false. so this hack staying in,\n      // in React if refresh() is implemented and returns false (or undefined), we force a refresh\n      setRenderKey(prev => prev + 1);\n    }\n  }, [renderDetails]);\n  useLayoutEffect(() => {\n    const doingJsEditor = editDetails && !editDetails.compDetails.componentFromFramework;\n    if (!doingJsEditor) {\n      return;\n    }\n    const compDetails = editDetails.compDetails;\n    const isPopup = editDetails.popup === true;\n    const cellEditor = createSyncJsComp(compDetails);\n    if (!cellEditor) {\n      return;\n    }\n    const compGui = cellEditor.getGui();\n    setCellEditorRef(isPopup, cellEditor);\n    if (!isPopup) {\n      const parentEl = (forceWrapper ? eCellWrapper : eGui).current;\n      parentEl === null || parentEl === void 0 ? void 0 : parentEl.appendChild(compGui);\n      cellEditor.afterGuiAttached && cellEditor.afterGuiAttached();\n    }\n    setJsEditorComp(cellEditor);\n    return () => {\n      context.destroyBean(cellEditor);\n      setCellEditorRef(isPopup, undefined);\n      setJsEditorComp(undefined);\n      if (compGui && compGui.parentElement) {\n        compGui.parentElement.removeChild(compGui);\n      }\n    };\n  }, [editDetails]);\n  // tool widgets effect\n  useLayoutEffect(() => {\n    if (!cellCtrl || !context) {\n      return;\n    }\n    if (!eCellWrapper.current || !showCellWrapper) {\n      return;\n    }\n    const destroyFuncs = [];\n    const addComp = comp => {\n      var _a;\n      if (comp) {\n        const eGui = comp.getGui();\n        (_a = eCellWrapper.current) === null || _a === void 0 ? void 0 : _a.insertAdjacentElement('afterbegin', eGui);\n        destroyFuncs.push(() => {\n          context.destroyBean(comp);\n          _.removeFromParent(eGui);\n        });\n      }\n      return comp;\n    };\n    if (includeSelection) {\n      const checkboxSelectionComp = cellCtrl.createSelectionCheckbox();\n      addComp(checkboxSelectionComp);\n    }\n    if (includeDndSource) {\n      addComp(cellCtrl.createDndSource());\n    }\n    if (includeRowDrag) {\n      addComp(cellCtrl.createRowDragComp());\n    }\n    return () => destroyFuncs.forEach(f => f());\n  }, [showCellWrapper, includeDndSource, includeRowDrag, includeSelection, cellWrapperVersion]);\n  // we use layout effect here as we want to synchronously process setComp and it's side effects\n  // to ensure the component is fully initialised prior to the first browser paint. See AG-7018.\n  useLayoutEffectOnce(() => {\n    if (!cellCtrl) {\n      return;\n    }\n    const compProxy = {\n      addOrRemoveCssClass: (name, on) => cssClassManager.addOrRemoveCssClass(name, on),\n      setUserStyles: styles => setUserStyles(styles),\n      getFocusableElement: () => eGui.current,\n      setTabIndex: tabIndex => setTabIndex(tabIndex),\n      setRole: role => setRole(role),\n      setColId: colId => setColId(colId),\n      setTitle: title => setTitle(title),\n      setIncludeSelection: include => setIncludeSelection(include),\n      setIncludeRowDrag: include => setIncludeRowDrag(include),\n      setIncludeDndSource: include => setIncludeDndSource(include),\n      getCellEditor: () => cellEditorRef.current || null,\n      getCellRenderer: () => cellRendererRef.current ? cellRendererRef.current : jsCellRendererRef.current,\n      getParentOfValue: () => eCellValue.current ? eCellValue.current : eCellWrapper.current ? eCellWrapper.current : eGui.current,\n      setRenderDetails: (compDetails, value, force) => {\n        setRenderDetails({\n          value,\n          compDetails,\n          force\n        });\n      },\n      setEditDetails: (compDetails, popup, popupPosition) => {\n        if (compDetails) {\n          // start editing\n          setEditDetails({\n            compDetails: compDetails,\n            popup,\n            popupPosition\n          });\n          if (!popup) {\n            setRenderDetails(undefined);\n          }\n        } else {\n          // stop editing\n          setEditDetails(undefined);\n        }\n      }\n    };\n    const cellWrapperOrUndefined = eCellWrapper.current || undefined;\n    cellCtrl.setComp(compProxy, eGui.current, cellWrapperOrUndefined, printLayout, editingRow);\n  });\n  const reactCellRendererStateless = useMemo(() => {\n    const res = renderDetails && renderDetails.compDetails && renderDetails.compDetails.componentFromFramework && isComponentStateless(renderDetails.compDetails.componentClass);\n    return !!res;\n  }, [renderDetails]);\n  useEffect(() => {\n    var _a;\n    if (!eGui.current) {\n      return;\n    }\n    cssClassManager.addOrRemoveCssClass('ag-cell-value', !showCellWrapper);\n    cssClassManager.addOrRemoveCssClass('ag-cell-inline-editing', !!editDetails && !editDetails.popup);\n    cssClassManager.addOrRemoveCssClass('ag-cell-popup-editing', !!editDetails && !!editDetails.popup);\n    cssClassManager.addOrRemoveCssClass('ag-cell-not-inline-editing', !editDetails || !!editDetails.popup);\n    (_a = cellCtrl.getRowCtrl()) === null || _a === void 0 ? void 0 : _a.setInlineEditingCss(!!editDetails);\n  });\n  const cellInstanceId = useMemo(() => cellCtrl.getInstanceId(), []);\n  const showContents = () => React.createElement(React.Fragment, null, renderDetails != null && jsxShowValue(renderDetails, renderKey, cellInstanceId, cellRendererRef, showCellWrapper, reactCellRendererStateless, setCellValueRef), editDetails != null && jsxEditValue(editDetails, setInlineCellEditorRef, setPopupCellEditorRef, eGui.current, cellCtrl, jsEditorComp));\n  return React.createElement(\"div\", {\n    ref: eGui,\n    style: userStyles,\n    tabIndex: tabIndex,\n    role: role,\n    \"col-id\": colId,\n    title: title\n  }, showCellWrapper ? React.createElement(\"div\", {\n    className: \"ag-cell-wrapper\",\n    role: \"presentation\",\n    ref: setCellWrapperRef\n  }, showContents()) : showContents());\n};\nexport default memo(CellComp);","map":{"version":3,"names":["_","CssClassManager","React","useCallback","useEffect","useRef","useState","useMemo","memo","useContext","useLayoutEffect","isComponentStateless","PopupEditorComp","useJsCellRenderer","BeansContext","createSyncJsComp","useLayoutEffectOnce","CellCompState","checkCellEditorDeprecations","popup","cellEditor","cellCtrl","col","getColumn","isPopup","msg","getColId","doOnce","console","warn","getPopupPosition","jsxEditValue","editDetails","setInlineCellEditorRef","setPopupCellEditorRef","eGui","jsEditorComp","compDetails","CellEditorClass","componentClass","reactInlineEditor","componentFromFramework","reactPopupEditor","jsPopupEditor","createElement","Fragment","Object","assign","params","ref","eParentCell","wrappedContent","jsChildComp","jsxShowValue","showDetails","key","parentId","cellRendererRef","showCellWrapper","reactCellRendererStateless","setECellValue","value","noCellRenderer","reactCellRenderer","CellRendererClass","valueForNoCellRenderer","toString","bodyJsxFunc","role","id","className","CellComp","props","context","printLayout","editingRow","renderDetails","setRenderDetails","setEditDetails","renderKey","setRenderKey","userStyles","setUserStyles","tabIndex","setTabIndex","setRole","colId","setColId","title","setTitle","includeSelection","setIncludeSelection","includeRowDrag","setIncludeRowDrag","includeDndSource","setIncludeDndSource","setJsEditorComp","forceWrapper","isForceWrapper","jsCellRendererRef","cellEditorRef","eCellWrapper","cellWrapperVersion","setCellWrapperVersion","setCellWrapperRef","current","v","eCellValue","cellValueVersion","setCellValueVersion","setCellValueRef","showTools","setCellEditorRef","editingCancelledByUserComp","isCancelBeforeStart","setTimeout","stopEditing","focusCell","cellRenderer","cssClassManager","lastRenderDetails","oldDetails","newDetails","oldCompDetails","newCompDetails","refresh","result","prev","doingJsEditor","compGui","getGui","parentEl","appendChild","afterGuiAttached","destroyBean","undefined","parentElement","removeChild","destroyFuncs","addComp","comp","_a","insertAdjacentElement","push","removeFromParent","checkboxSelectionComp","createSelectionCheckbox","createDndSource","createRowDragComp","forEach","f","compProxy","addOrRemoveCssClass","name","on","styles","getFocusableElement","include","getCellEditor","getCellRenderer","getParentOfValue","force","popupPosition","cellWrapperOrUndefined","setComp","res","getRowCtrl","setInlineEditingCss","cellInstanceId","getInstanceId","showContents","style"],"sources":["/home/vvdn/React-practice/hello/node_modules/ag-grid-react/lib/reactUi/cells/cellComp.mjs"],"sourcesContent":["// ag-grid-react v30.0.4\nimport { _, CssClassManager } from 'ag-grid-community';\nimport React, { useCallback, useEffect, useRef, useState, useMemo, memo, useContext, useLayoutEffect } from 'react';\nimport { isComponentStateless } from '../utils.mjs';\nimport PopupEditorComp from './popupEditorComp.mjs';\nimport useJsCellRenderer from './showJsRenderer.mjs';\nimport { BeansContext } from '../beansContext.mjs';\nimport { createSyncJsComp } from '../jsComp.mjs';\nimport { useLayoutEffectOnce } from '../useEffectOnce.mjs';\nexport var CellCompState;\n(function (CellCompState) {\n    CellCompState[CellCompState[\"ShowValue\"] = 0] = \"ShowValue\";\n    CellCompState[CellCompState[\"EditValue\"] = 1] = \"EditValue\";\n})(CellCompState || (CellCompState = {}));\nconst checkCellEditorDeprecations = (popup, cellEditor, cellCtrl) => {\n    const col = cellCtrl.getColumn();\n    // cellEditor is written to be a popup editor, however colDef.cellEditorPopup is not set\n    if (!popup && cellEditor.isPopup && cellEditor.isPopup()) {\n        const msg = `AG Grid: Found an issue in column ${col.getColId()}. If using React, specify an editor is a popup using colDef.cellEditorPopup=true. AG Grid React cannot depend on the editor component specifying if it's in a popup (via the isPopup() method on the editor), as React needs to know this information BEFORE the component is created.`;\n        _.doOnce(() => console.warn(msg), 'jsEditorComp-isPopup-' + cellCtrl.getColumn().getColId());\n    }\n    // cellEditor is a popup and is trying to position itself the deprecated way\n    if (popup && cellEditor.getPopupPosition && cellEditor.getPopupPosition() != null) {\n        const msg = `AG Grid: Found an issue in column ${col.getColId()}. If using React, specify an editor popup position using colDef.cellEditorPopupPosition=true. AG Grid React cannot depend on the editor component specifying it's position (via the getPopupPosition() method on the editor), as React needs to know this information BEFORE the component is created.`;\n        _.doOnce(() => console.warn(msg), 'jsEditorComp-getPopupPosition-' + cellCtrl.getColumn().getColId());\n    }\n};\nconst jsxEditValue = (editDetails, setInlineCellEditorRef, setPopupCellEditorRef, eGui, cellCtrl, jsEditorComp) => {\n    const compDetails = editDetails.compDetails;\n    const CellEditorClass = compDetails.componentClass;\n    const reactInlineEditor = compDetails.componentFromFramework && !editDetails.popup;\n    const reactPopupEditor = compDetails.componentFromFramework && editDetails.popup;\n    const jsPopupEditor = !compDetails.componentFromFramework && editDetails.popup;\n    return (React.createElement(React.Fragment, null,\n        reactInlineEditor && React.createElement(CellEditorClass, Object.assign({}, editDetails.compDetails.params, { ref: setInlineCellEditorRef })),\n        reactPopupEditor &&\n            React.createElement(PopupEditorComp, { editDetails: editDetails, cellCtrl: cellCtrl, eParentCell: eGui, wrappedContent: React.createElement(CellEditorClass, Object.assign({}, editDetails.compDetails.params, { ref: setPopupCellEditorRef })) }),\n        jsPopupEditor &&\n            jsEditorComp &&\n            React.createElement(PopupEditorComp, { editDetails: editDetails, cellCtrl: cellCtrl, eParentCell: eGui, jsChildComp: jsEditorComp })));\n};\nconst jsxShowValue = (showDetails, key, parentId, cellRendererRef, showCellWrapper, reactCellRendererStateless, setECellValue) => {\n    const { compDetails, value } = showDetails;\n    const noCellRenderer = !compDetails;\n    const reactCellRenderer = compDetails && compDetails.componentFromFramework;\n    const CellRendererClass = compDetails && compDetails.componentClass;\n    // if we didn't do this, objects would cause React error. we depend on objects for things\n    // like the aggregation functions avg and count, which return objects and depend on toString()\n    // getting called.\n    const valueForNoCellRenderer = (value === null || value === void 0 ? void 0 : value.toString) ? value.toString() : value;\n    const bodyJsxFunc = () => (React.createElement(React.Fragment, null,\n        noCellRenderer && React.createElement(React.Fragment, null, valueForNoCellRenderer),\n        reactCellRenderer && !reactCellRendererStateless && React.createElement(CellRendererClass, Object.assign({}, compDetails.params, { key: key, ref: cellRendererRef })),\n        reactCellRenderer && reactCellRendererStateless && React.createElement(CellRendererClass, Object.assign({}, compDetails.params, { key: key }))));\n    return (React.createElement(React.Fragment, null, showCellWrapper\n        ? (React.createElement(\"span\", { role: \"presentation\", id: `cell-${parentId}`, className: \"ag-cell-value\", ref: setECellValue }, bodyJsxFunc()))\n        : bodyJsxFunc()));\n};\nconst CellComp = (props) => {\n    const { context } = useContext(BeansContext);\n    const { cellCtrl, printLayout, editingRow } = props;\n    const [renderDetails, setRenderDetails] = useState();\n    const [editDetails, setEditDetails] = useState();\n    const [renderKey, setRenderKey] = useState(1);\n    const [userStyles, setUserStyles] = useState();\n    const [tabIndex, setTabIndex] = useState();\n    const [role, setRole] = useState();\n    const [colId, setColId] = useState();\n    const [title, setTitle] = useState();\n    const [includeSelection, setIncludeSelection] = useState(false);\n    const [includeRowDrag, setIncludeRowDrag] = useState(false);\n    const [includeDndSource, setIncludeDndSource] = useState(false);\n    const [jsEditorComp, setJsEditorComp] = useState();\n    const forceWrapper = useMemo(() => cellCtrl.isForceWrapper(), []);\n    const eGui = useRef(null);\n    const cellRendererRef = useRef(null);\n    const jsCellRendererRef = useRef();\n    const cellEditorRef = useRef();\n    // when setting the ref, we also update the state item to force a re-render\n    const eCellWrapper = useRef();\n    const [cellWrapperVersion, setCellWrapperVersion] = useState(0);\n    const setCellWrapperRef = useCallback((ref) => {\n        eCellWrapper.current = ref;\n        setCellWrapperVersion(v => v + 1);\n    }, []);\n    // when setting the ref, we also update the state item to force a re-render\n    const eCellValue = useRef();\n    const [cellValueVersion, setCellValueVersion] = useState(0);\n    const setCellValueRef = useCallback((ref) => {\n        eCellValue.current = ref;\n        setCellValueVersion(v => v + 1);\n    }, []);\n    const showTools = renderDetails != null && (includeSelection || includeDndSource || includeRowDrag);\n    const showCellWrapper = forceWrapper || showTools;\n    const setCellEditorRef = useCallback((popup, cellEditor) => {\n        cellEditorRef.current = cellEditor;\n        if (cellEditor) {\n            checkCellEditorDeprecations(popup, cellEditor, cellCtrl);\n            const editingCancelledByUserComp = cellEditor.isCancelBeforeStart && cellEditor.isCancelBeforeStart();\n            if (editingCancelledByUserComp) {\n                // we cannot set state inside render, so hack is to do it in next VM turn\n                setTimeout(() => {\n                    cellCtrl.stopEditing(true);\n                    cellCtrl.focusCell(true);\n                });\n            }\n        }\n    }, []);\n    const setPopupCellEditorRef = useCallback((cellRenderer) => setCellEditorRef(true, cellRenderer), []);\n    const setInlineCellEditorRef = useCallback((cellRenderer) => setCellEditorRef(false, cellRenderer), []);\n    const cssClassManager = useMemo(() => new CssClassManager(() => eGui.current), []);\n    useJsCellRenderer(renderDetails, showCellWrapper, eCellValue.current, cellValueVersion, jsCellRendererRef, eGui);\n    // if RenderDetails changed, need to call refresh. This is not our preferred way (the preferred\n    // way for React is just allow the new props to propagate down to the React Cell Renderer)\n    // however we do this for backwards compatibility, as having refresh used to be supported.\n    const lastRenderDetails = useRef();\n    useLayoutEffect(() => {\n        const oldDetails = lastRenderDetails.current;\n        const newDetails = renderDetails;\n        lastRenderDetails.current = renderDetails;\n        // if not updating renderDetails, do nothing\n        if (oldDetails == null ||\n            oldDetails.compDetails == null ||\n            newDetails == null ||\n            newDetails.compDetails == null) {\n            return;\n        }\n        const oldCompDetails = oldDetails.compDetails;\n        const newCompDetails = newDetails.compDetails;\n        // if different Cell Renderer, then do nothing, as renderer will be recreated\n        if (oldCompDetails.componentClass != newCompDetails.componentClass) {\n            return;\n        }\n        // if no refresh method, do nothing\n        if (cellRendererRef.current == null || cellRendererRef.current.refresh == null) {\n            return;\n        }\n        const result = cellRendererRef.current.refresh(newCompDetails.params);\n        if (result != true) {\n            // increasing the render key forces the refresh. this is undocumented (for React users,\n            // we don't document the refresh method, instead we tell them to act on new params).\n            // however the GroupCellRenderer has this logic in it and would need a small refactor\n            // to get it working without using refresh() returning false. so this hack staying in,\n            // in React if refresh() is implemented and returns false (or undefined), we force a refresh\n            setRenderKey(prev => prev + 1);\n        }\n    }, [renderDetails]);\n    useLayoutEffect(() => {\n        const doingJsEditor = editDetails && !editDetails.compDetails.componentFromFramework;\n        if (!doingJsEditor) {\n            return;\n        }\n        const compDetails = editDetails.compDetails;\n        const isPopup = editDetails.popup === true;\n        const cellEditor = createSyncJsComp(compDetails);\n        if (!cellEditor) {\n            return;\n        }\n        const compGui = cellEditor.getGui();\n        setCellEditorRef(isPopup, cellEditor);\n        if (!isPopup) {\n            const parentEl = (forceWrapper ? eCellWrapper : eGui).current;\n            parentEl === null || parentEl === void 0 ? void 0 : parentEl.appendChild(compGui);\n            cellEditor.afterGuiAttached && cellEditor.afterGuiAttached();\n        }\n        setJsEditorComp(cellEditor);\n        return () => {\n            context.destroyBean(cellEditor);\n            setCellEditorRef(isPopup, undefined);\n            setJsEditorComp(undefined);\n            if (compGui && compGui.parentElement) {\n                compGui.parentElement.removeChild(compGui);\n            }\n        };\n    }, [editDetails]);\n    // tool widgets effect\n    useLayoutEffect(() => {\n        if (!cellCtrl || !context) {\n            return;\n        }\n        if (!eCellWrapper.current || !showCellWrapper) {\n            return;\n        }\n        const destroyFuncs = [];\n        const addComp = (comp) => {\n            var _a;\n            if (comp) {\n                const eGui = comp.getGui();\n                (_a = eCellWrapper.current) === null || _a === void 0 ? void 0 : _a.insertAdjacentElement('afterbegin', eGui);\n                destroyFuncs.push(() => {\n                    context.destroyBean(comp);\n                    _.removeFromParent(eGui);\n                });\n            }\n            return comp;\n        };\n        if (includeSelection) {\n            const checkboxSelectionComp = cellCtrl.createSelectionCheckbox();\n            addComp(checkboxSelectionComp);\n        }\n        if (includeDndSource) {\n            addComp(cellCtrl.createDndSource());\n        }\n        if (includeRowDrag) {\n            addComp(cellCtrl.createRowDragComp());\n        }\n        return () => destroyFuncs.forEach(f => f());\n    }, [showCellWrapper, includeDndSource, includeRowDrag, includeSelection, cellWrapperVersion]);\n    // we use layout effect here as we want to synchronously process setComp and it's side effects\n    // to ensure the component is fully initialised prior to the first browser paint. See AG-7018.\n    useLayoutEffectOnce(() => {\n        if (!cellCtrl) {\n            return;\n        }\n        const compProxy = {\n            addOrRemoveCssClass: (name, on) => cssClassManager.addOrRemoveCssClass(name, on),\n            setUserStyles: (styles) => setUserStyles(styles),\n            getFocusableElement: () => eGui.current,\n            setTabIndex: tabIndex => setTabIndex(tabIndex),\n            setRole: role => setRole(role),\n            setColId: colId => setColId(colId),\n            setTitle: title => setTitle(title),\n            setIncludeSelection: include => setIncludeSelection(include),\n            setIncludeRowDrag: include => setIncludeRowDrag(include),\n            setIncludeDndSource: include => setIncludeDndSource(include),\n            getCellEditor: () => cellEditorRef.current || null,\n            getCellRenderer: () => cellRendererRef.current ? cellRendererRef.current : jsCellRendererRef.current,\n            getParentOfValue: () => eCellValue.current ? eCellValue.current : eCellWrapper.current ? eCellWrapper.current : eGui.current,\n            setRenderDetails: (compDetails, value, force) => {\n                setRenderDetails({\n                    value,\n                    compDetails,\n                    force\n                });\n            },\n            setEditDetails: (compDetails, popup, popupPosition) => {\n                if (compDetails) {\n                    // start editing\n                    setEditDetails({\n                        compDetails: compDetails,\n                        popup,\n                        popupPosition\n                    });\n                    if (!popup) {\n                        setRenderDetails(undefined);\n                    }\n                }\n                else {\n                    // stop editing\n                    setEditDetails(undefined);\n                }\n            }\n        };\n        const cellWrapperOrUndefined = eCellWrapper.current || undefined;\n        cellCtrl.setComp(compProxy, eGui.current, cellWrapperOrUndefined, printLayout, editingRow);\n    });\n    const reactCellRendererStateless = useMemo(() => {\n        const res = renderDetails &&\n            renderDetails.compDetails &&\n            renderDetails.compDetails.componentFromFramework &&\n            isComponentStateless(renderDetails.compDetails.componentClass);\n        return !!res;\n    }, [renderDetails]);\n    useEffect(() => {\n        var _a;\n        if (!eGui.current) {\n            return;\n        }\n        cssClassManager.addOrRemoveCssClass('ag-cell-value', !showCellWrapper);\n        cssClassManager.addOrRemoveCssClass('ag-cell-inline-editing', !!editDetails && !editDetails.popup);\n        cssClassManager.addOrRemoveCssClass('ag-cell-popup-editing', !!editDetails && !!editDetails.popup);\n        cssClassManager.addOrRemoveCssClass('ag-cell-not-inline-editing', !editDetails || !!editDetails.popup);\n        (_a = cellCtrl.getRowCtrl()) === null || _a === void 0 ? void 0 : _a.setInlineEditingCss(!!editDetails);\n    });\n    const cellInstanceId = useMemo(() => cellCtrl.getInstanceId(), []);\n    const showContents = () => (React.createElement(React.Fragment, null,\n        (renderDetails != null && jsxShowValue(renderDetails, renderKey, cellInstanceId, cellRendererRef, showCellWrapper, reactCellRendererStateless, setCellValueRef)),\n        (editDetails != null && jsxEditValue(editDetails, setInlineCellEditorRef, setPopupCellEditorRef, eGui.current, cellCtrl, jsEditorComp))));\n    return (React.createElement(\"div\", { ref: eGui, style: userStyles, tabIndex: tabIndex, role: role, \"col-id\": colId, title: title }, showCellWrapper\n        ? (React.createElement(\"div\", { className: \"ag-cell-wrapper\", role: \"presentation\", ref: setCellWrapperRef }, showContents()))\n        : showContents()));\n};\nexport default memo(CellComp);\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}