{"ast":null,"code":"// ag-grid-react v30.0.4\nimport { GroupCellRendererCtrl, _ } from \"ag-grid-community\";\nimport React, { useContext, useImperativeHandle, forwardRef, useMemo, useRef, useState, useLayoutEffect } from 'react';\nimport { BeansContext } from \"../beansContext.mjs\";\nimport { showJsComp } from \"../jsComp.mjs\";\nimport { useLayoutEffectOnce } from \"../useEffectOnce.mjs\";\nimport { CssClasses } from \"../utils.mjs\";\nconst GroupCellRenderer = forwardRef((props, ref) => {\n  const context = useContext(BeansContext).context;\n  const eGui = useRef(null);\n  const eValueRef = useRef(null);\n  const eCheckboxRef = useRef(null);\n  const eExpandedRef = useRef(null);\n  const eContractedRef = useRef(null);\n  const [innerCompDetails, setInnerCompDetails] = useState();\n  const [childCount, setChildCount] = useState();\n  const [value, setValue] = useState();\n  const [cssClasses, setCssClasses] = useState(new CssClasses());\n  const [expandedCssClasses, setExpandedCssClasses] = useState(new CssClasses('ag-hidden'));\n  const [contractedCssClasses, setContractedCssClasses] = useState(new CssClasses('ag-hidden'));\n  const [checkboxCssClasses, setCheckboxCssClasses] = useState(new CssClasses('ag-invisible'));\n  useImperativeHandle(ref, () => {\n    return {\n      // force new instance when grid tries to refresh\n      refresh() {\n        return false;\n      }\n    };\n  });\n  useLayoutEffect(() => {\n    return showJsComp(innerCompDetails, context, eValueRef.current);\n  }, [innerCompDetails]);\n  useLayoutEffectOnce(() => {\n    const compProxy = {\n      setInnerRenderer: (details, valueToDisplay) => {\n        setInnerCompDetails(details);\n        setValue(valueToDisplay);\n      },\n      setChildCount: count => setChildCount(count),\n      addOrRemoveCssClass: (name, on) => setCssClasses(prev => prev.setClass(name, on)),\n      setContractedDisplayed: displayed => setContractedCssClasses(prev => prev.setClass('ag-hidden', !displayed)),\n      setExpandedDisplayed: displayed => setExpandedCssClasses(prev => prev.setClass('ag-hidden', !displayed)),\n      setCheckboxVisible: visible => setCheckboxCssClasses(prev => prev.setClass('ag-invisible', !visible))\n    };\n    const ctrl = context.createBean(new GroupCellRendererCtrl());\n    ctrl.init(compProxy, eGui.current, eCheckboxRef.current, eExpandedRef.current, eContractedRef.current, GroupCellRenderer, props);\n    return () => {\n      context.destroyBean(ctrl);\n    };\n  });\n  const className = useMemo(() => `ag-cell-wrapper ${cssClasses.toString()}`, [cssClasses]);\n  const expandedClassName = useMemo(() => `ag-group-expanded ${expandedCssClasses.toString()}`, [expandedCssClasses]);\n  const contractedClassName = useMemo(() => `ag-group-contracted ${contractedCssClasses.toString()}`, [contractedCssClasses]);\n  const checkboxClassName = useMemo(() => `ag-group-checkbox ${checkboxCssClasses.toString()}`, [checkboxCssClasses]);\n  const useFwRenderer = innerCompDetails && innerCompDetails.componentFromFramework;\n  const FwRenderer = useFwRenderer ? innerCompDetails.componentClass : undefined;\n  const useValue = innerCompDetails == null && value != null;\n  const escapedValue = _.escapeString(value, true);\n  return React.createElement(\"span\", Object.assign({\n    className: className,\n    ref: eGui\n  }, !props.colDef ? {\n    role: 'gridcell'\n  } : {}), React.createElement(\"span\", {\n    className: expandedClassName,\n    ref: eExpandedRef\n  }), React.createElement(\"span\", {\n    className: contractedClassName,\n    ref: eContractedRef\n  }), React.createElement(\"span\", {\n    className: checkboxClassName,\n    ref: eCheckboxRef\n  }), React.createElement(\"span\", {\n    className: \"ag-group-value\",\n    ref: eValueRef\n  }, useValue && React.createElement(React.Fragment, null, escapedValue), useFwRenderer && React.createElement(FwRenderer, Object.assign({}, innerCompDetails.params))), React.createElement(\"span\", {\n    className: \"ag-group-child-count\"\n  }, childCount));\n});\n// we do not memo() here, as it would stop the forwardRef working\nexport default GroupCellRenderer;","map":{"version":3,"names":["GroupCellRendererCtrl","_","React","useContext","useImperativeHandle","forwardRef","useMemo","useRef","useState","useLayoutEffect","BeansContext","showJsComp","useLayoutEffectOnce","CssClasses","GroupCellRenderer","props","ref","context","eGui","eValueRef","eCheckboxRef","eExpandedRef","eContractedRef","innerCompDetails","setInnerCompDetails","childCount","setChildCount","value","setValue","cssClasses","setCssClasses","expandedCssClasses","setExpandedCssClasses","contractedCssClasses","setContractedCssClasses","checkboxCssClasses","setCheckboxCssClasses","refresh","current","compProxy","setInnerRenderer","details","valueToDisplay","count","addOrRemoveCssClass","name","on","prev","setClass","setContractedDisplayed","displayed","setExpandedDisplayed","setCheckboxVisible","visible","ctrl","createBean","init","destroyBean","className","toString","expandedClassName","contractedClassName","checkboxClassName","useFwRenderer","componentFromFramework","FwRenderer","componentClass","undefined","useValue","escapedValue","escapeString","createElement","Object","assign","colDef","role","Fragment","params"],"sources":["/home/vvdn/React-practice/hello/node_modules/ag-grid-react/lib/reactUi/cellRenderer/groupCellRenderer.mjs"],"sourcesContent":["// ag-grid-react v30.0.4\nimport { GroupCellRendererCtrl, _ } from \"ag-grid-community\";\nimport React, { useContext, useImperativeHandle, forwardRef, useMemo, useRef, useState, useLayoutEffect } from 'react';\nimport { BeansContext } from \"../beansContext.mjs\";\nimport { showJsComp } from \"../jsComp.mjs\";\nimport { useLayoutEffectOnce } from \"../useEffectOnce.mjs\";\nimport { CssClasses } from \"../utils.mjs\";\nconst GroupCellRenderer = forwardRef((props, ref) => {\n    const context = useContext(BeansContext).context;\n    const eGui = useRef(null);\n    const eValueRef = useRef(null);\n    const eCheckboxRef = useRef(null);\n    const eExpandedRef = useRef(null);\n    const eContractedRef = useRef(null);\n    const [innerCompDetails, setInnerCompDetails] = useState();\n    const [childCount, setChildCount] = useState();\n    const [value, setValue] = useState();\n    const [cssClasses, setCssClasses] = useState(new CssClasses());\n    const [expandedCssClasses, setExpandedCssClasses] = useState(new CssClasses('ag-hidden'));\n    const [contractedCssClasses, setContractedCssClasses] = useState(new CssClasses('ag-hidden'));\n    const [checkboxCssClasses, setCheckboxCssClasses] = useState(new CssClasses('ag-invisible'));\n    useImperativeHandle(ref, () => {\n        return {\n            // force new instance when grid tries to refresh\n            refresh() { return false; }\n        };\n    });\n    useLayoutEffect(() => {\n        return showJsComp(innerCompDetails, context, eValueRef.current);\n    }, [innerCompDetails]);\n    useLayoutEffectOnce(() => {\n        const compProxy = {\n            setInnerRenderer: (details, valueToDisplay) => {\n                setInnerCompDetails(details);\n                setValue(valueToDisplay);\n            },\n            setChildCount: count => setChildCount(count),\n            addOrRemoveCssClass: (name, on) => setCssClasses(prev => prev.setClass(name, on)),\n            setContractedDisplayed: displayed => setContractedCssClasses(prev => prev.setClass('ag-hidden', !displayed)),\n            setExpandedDisplayed: displayed => setExpandedCssClasses(prev => prev.setClass('ag-hidden', !displayed)),\n            setCheckboxVisible: visible => setCheckboxCssClasses(prev => prev.setClass('ag-invisible', !visible))\n        };\n        const ctrl = context.createBean(new GroupCellRendererCtrl());\n        ctrl.init(compProxy, eGui.current, eCheckboxRef.current, eExpandedRef.current, eContractedRef.current, GroupCellRenderer, props);\n        return () => { context.destroyBean(ctrl); };\n    });\n    const className = useMemo(() => `ag-cell-wrapper ${cssClasses.toString()}`, [cssClasses]);\n    const expandedClassName = useMemo(() => `ag-group-expanded ${expandedCssClasses.toString()}`, [expandedCssClasses]);\n    const contractedClassName = useMemo(() => `ag-group-contracted ${contractedCssClasses.toString()}`, [contractedCssClasses]);\n    const checkboxClassName = useMemo(() => `ag-group-checkbox ${checkboxCssClasses.toString()}`, [checkboxCssClasses]);\n    const useFwRenderer = innerCompDetails && innerCompDetails.componentFromFramework;\n    const FwRenderer = useFwRenderer ? innerCompDetails.componentClass : undefined;\n    const useValue = innerCompDetails == null && value != null;\n    const escapedValue = _.escapeString(value, true);\n    return (React.createElement(\"span\", Object.assign({ className: className, ref: eGui }, (!props.colDef ? { role: 'gridcell' } : {})),\n        React.createElement(\"span\", { className: expandedClassName, ref: eExpandedRef }),\n        React.createElement(\"span\", { className: contractedClassName, ref: eContractedRef }),\n        React.createElement(\"span\", { className: checkboxClassName, ref: eCheckboxRef }),\n        React.createElement(\"span\", { className: \"ag-group-value\", ref: eValueRef },\n            useValue && React.createElement(React.Fragment, null, escapedValue),\n            useFwRenderer && React.createElement(FwRenderer, Object.assign({}, innerCompDetails.params))),\n        React.createElement(\"span\", { className: \"ag-group-child-count\" }, childCount)));\n});\n// we do not memo() here, as it would stop the forwardRef working\nexport default GroupCellRenderer;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}