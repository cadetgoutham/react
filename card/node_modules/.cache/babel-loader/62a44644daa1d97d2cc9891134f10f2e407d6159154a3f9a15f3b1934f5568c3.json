{"ast":null,"code":"// ag-grid-react v30.0.4\nimport React, { useEffect, useRef, useState, useMemo, memo, useContext, useLayoutEffect } from 'react';\nimport { CssClassManager } from 'ag-grid-community';\nimport { showJsComp } from '../jsComp.mjs';\nimport { isComponentStateless, agFlushSync } from '../utils.mjs';\nimport { BeansContext } from '../beansContext.mjs';\nimport CellComp from '../cells/cellComp.mjs';\nimport { useLayoutEffectOnce } from '../useEffectOnce.mjs';\nconst maintainOrderOnColumns = (prev, next, domOrder) => {\n  if (domOrder) {\n    const res = {\n      list: next,\n      instanceIdMap: new Map()\n    };\n    next.forEach(c => res.instanceIdMap.set(c.getInstanceId(), c));\n    return res;\n  }\n  // if dom order not important, we don't want to change the order\n  // of the elements in the dom, as this would break transition styles\n  const oldCellCtrls = [];\n  const newCellCtrls = [];\n  const newInstanceIdMap = new Map();\n  const tempMap = new Map();\n  next.forEach(c => tempMap.set(c.getInstanceId(), c));\n  prev.list.forEach(c => {\n    const instanceId = c.getInstanceId();\n    if (tempMap.has(instanceId)) {\n      oldCellCtrls.push(c);\n      newInstanceIdMap.set(instanceId, c);\n    }\n  });\n  next.forEach(c => {\n    const instanceId = c.getInstanceId();\n    if (!prev.instanceIdMap.has(instanceId)) {\n      newCellCtrls.push(c);\n      newInstanceIdMap.set(instanceId, c);\n    }\n  });\n  const res = {\n    list: [...oldCellCtrls, ...newCellCtrls],\n    instanceIdMap: newInstanceIdMap\n  };\n  return res;\n};\nconst RowComp = params => {\n  const {\n    context\n  } = useContext(BeansContext);\n  const {\n    rowCtrl,\n    containerType\n  } = params;\n  const [rowIndex, setRowIndex] = useState();\n  const [rowId, setRowId] = useState();\n  const [role, setRole] = useState();\n  const [rowBusinessKey, setRowBusinessKey] = useState();\n  const [tabIndex, setTabIndex] = useState();\n  const [userStyles, setUserStyles] = useState();\n  const [cellCtrls, setCellCtrls] = useState({\n    list: [],\n    instanceIdMap: new Map()\n  });\n  const [fullWidthCompDetails, setFullWidthCompDetails] = useState();\n  const [domOrder, setDomOrder] = useState(false);\n  // these styles have initial values, so element is placed into the DOM with them,\n  // rather than an transition getting applied.\n  const [top, setTop] = useState(rowCtrl.getInitialRowTop(containerType));\n  const [transform, setTransform] = useState(rowCtrl.getInitialTransform(containerType));\n  const eGui = useRef(null);\n  const fullWidthCompRef = useRef();\n  const autoHeightSetup = useRef(false);\n  const [autoHeightSetupAttempt, setAutoHeightSetupAttempt] = useState(0);\n  // puts autoHeight onto full with detail rows. this needs trickery, as we need\n  // the HTMLElement for the provided Detail Cell Renderer, however the Detail Cell Renderer\n  // could be a stateless React Func Comp which won't work with useRef, so we need\n  // to poll (we limit to 10) looking for the Detail HTMLElement (which will be the only\n  // child) after the fullWidthCompDetails is set.\n  useEffect(() => {\n    var _a;\n    if (autoHeightSetup.current) {\n      return;\n    }\n    if (!fullWidthCompDetails) {\n      return;\n    }\n    if (autoHeightSetupAttempt > 10) {\n      return;\n    }\n    const eChild = (_a = eGui.current) === null || _a === void 0 ? void 0 : _a.firstChild;\n    if (eChild) {\n      rowCtrl.setupDetailRowAutoHeight(eChild);\n      autoHeightSetup.current = true;\n    } else {\n      setAutoHeightSetupAttempt(prev => prev + 1);\n    }\n  }, [fullWidthCompDetails, autoHeightSetupAttempt]);\n  const cssClassManager = useMemo(() => new CssClassManager(() => eGui.current), []);\n  // we use layout effect here as we want to synchronously process setComp and it's side effects\n  // to ensure the component is fully initialised prior to the first browser paint. See AG-7018.\n  useLayoutEffectOnce(() => {\n    // because React is asynchronous, it's possible the RowCtrl is no longer a valid RowCtrl. This can\n    // happen if user calls two API methods one after the other, with the second API invalidating the rows\n    // the first call created. Thus the rows for the first call could still get created even though no longer needed.\n    if (!rowCtrl.isAlive()) {\n      return;\n    }\n    const compProxy = {\n      // the rowTop is managed by state, instead of direct style manipulation by rowCtrl (like all the other styles)\n      // as we need to have an initial value when it's placed into he DOM for the first time, for animation to work.\n      setTop: value => setTop(value),\n      setTransform: value => setTransform(value),\n      // i found using React for managing classes at the row level was to slow, as modifying classes caused a lot of\n      // React code to execute, so avoiding React for managing CSS Classes made the grid go much faster.\n      addOrRemoveCssClass: (name, on) => cssClassManager.addOrRemoveCssClass(name, on),\n      setDomOrder: domOrder => setDomOrder(domOrder),\n      setRowIndex: value => setRowIndex(value),\n      setRowId: value => setRowId(value),\n      setRowBusinessKey: value => setRowBusinessKey(value),\n      setTabIndex: value => setTabIndex(value),\n      setUserStyles: styles => setUserStyles(styles),\n      setRole: value => setRole(value),\n      // if we don't maintain the order, then cols will be ripped out and into the dom\n      // when cols reordered, which would stop the CSS transitions from working\n      setCellCtrls: (next, useFlushSync) => {\n        agFlushSync(useFlushSync, () => {\n          setCellCtrls(prev => maintainOrderOnColumns(prev, next, domOrder));\n        });\n      },\n      showFullWidth: compDetails => setFullWidthCompDetails(compDetails),\n      getFullWidthCellRenderer: () => fullWidthCompRef.current\n    };\n    rowCtrl.setComp(compProxy, eGui.current, containerType);\n    return () => {\n      rowCtrl.unsetComp(containerType);\n    };\n  });\n  useLayoutEffect(() => showJsComp(fullWidthCompDetails, context, eGui.current, fullWidthCompRef), [fullWidthCompDetails]);\n  const rowStyles = useMemo(() => {\n    const res = {\n      top,\n      transform\n    };\n    Object.assign(res, userStyles);\n    return res;\n  }, [top, transform, userStyles]);\n  const showFullWidthFramework = fullWidthCompDetails && fullWidthCompDetails.componentFromFramework;\n  const showCells = cellCtrls != null;\n  const reactFullWidthCellRendererStateless = useMemo(() => {\n    const res = (fullWidthCompDetails === null || fullWidthCompDetails === void 0 ? void 0 : fullWidthCompDetails.componentFromFramework) && isComponentStateless(fullWidthCompDetails.componentClass);\n    return !!res;\n  }, [fullWidthCompDetails]);\n  const showCellsJsx = () => cellCtrls.list.map(cellCtrl => React.createElement(CellComp, {\n    cellCtrl: cellCtrl,\n    editingRow: rowCtrl.isEditing(),\n    printLayout: rowCtrl.isPrintLayout(),\n    key: cellCtrl.getInstanceId()\n  }));\n  const showFullWidthFrameworkJsx = () => {\n    const FullWidthComp = fullWidthCompDetails.componentClass;\n    return React.createElement(React.Fragment, null, reactFullWidthCellRendererStateless && React.createElement(FullWidthComp, Object.assign({}, fullWidthCompDetails.params)), !reactFullWidthCellRendererStateless && React.createElement(FullWidthComp, Object.assign({}, fullWidthCompDetails.params, {\n      ref: fullWidthCompRef\n    })));\n  };\n  return React.createElement(\"div\", {\n    ref: eGui,\n    role: role,\n    style: rowStyles,\n    \"row-index\": rowIndex,\n    \"row-id\": rowId,\n    \"row-business-key\": rowBusinessKey,\n    tabIndex: tabIndex\n  }, showCells && showCellsJsx(), showFullWidthFramework && showFullWidthFrameworkJsx());\n};\nexport default memo(RowComp);","map":{"version":3,"names":["React","useEffect","useRef","useState","useMemo","memo","useContext","useLayoutEffect","CssClassManager","showJsComp","isComponentStateless","agFlushSync","BeansContext","CellComp","useLayoutEffectOnce","maintainOrderOnColumns","prev","next","domOrder","res","list","instanceIdMap","Map","forEach","c","set","getInstanceId","oldCellCtrls","newCellCtrls","newInstanceIdMap","tempMap","instanceId","has","push","RowComp","params","context","rowCtrl","containerType","rowIndex","setRowIndex","rowId","setRowId","role","setRole","rowBusinessKey","setRowBusinessKey","tabIndex","setTabIndex","userStyles","setUserStyles","cellCtrls","setCellCtrls","fullWidthCompDetails","setFullWidthCompDetails","setDomOrder","top","setTop","getInitialRowTop","transform","setTransform","getInitialTransform","eGui","fullWidthCompRef","autoHeightSetup","autoHeightSetupAttempt","setAutoHeightSetupAttempt","_a","current","eChild","firstChild","setupDetailRowAutoHeight","cssClassManager","isAlive","compProxy","value","addOrRemoveCssClass","name","on","styles","useFlushSync","showFullWidth","compDetails","getFullWidthCellRenderer","setComp","unsetComp","rowStyles","Object","assign","showFullWidthFramework","componentFromFramework","showCells","reactFullWidthCellRendererStateless","componentClass","showCellsJsx","map","cellCtrl","createElement","editingRow","isEditing","printLayout","isPrintLayout","key","showFullWidthFrameworkJsx","FullWidthComp","Fragment","ref","style"],"sources":["/home/vvdn/React-practice/hello/node_modules/ag-grid-react/lib/reactUi/rows/rowComp.mjs"],"sourcesContent":["// ag-grid-react v30.0.4\nimport React, { useEffect, useRef, useState, useMemo, memo, useContext, useLayoutEffect } from 'react';\nimport { CssClassManager } from 'ag-grid-community';\nimport { showJsComp } from '../jsComp.mjs';\nimport { isComponentStateless, agFlushSync } from '../utils.mjs';\nimport { BeansContext } from '../beansContext.mjs';\nimport CellComp from '../cells/cellComp.mjs';\nimport { useLayoutEffectOnce } from '../useEffectOnce.mjs';\nconst maintainOrderOnColumns = (prev, next, domOrder) => {\n    if (domOrder) {\n        const res = { list: next, instanceIdMap: new Map() };\n        next.forEach(c => res.instanceIdMap.set(c.getInstanceId(), c));\n        return res;\n    }\n    // if dom order not important, we don't want to change the order\n    // of the elements in the dom, as this would break transition styles\n    const oldCellCtrls = [];\n    const newCellCtrls = [];\n    const newInstanceIdMap = new Map();\n    const tempMap = new Map();\n    next.forEach(c => tempMap.set(c.getInstanceId(), c));\n    prev.list.forEach(c => {\n        const instanceId = c.getInstanceId();\n        if (tempMap.has(instanceId)) {\n            oldCellCtrls.push(c);\n            newInstanceIdMap.set(instanceId, c);\n        }\n    });\n    next.forEach(c => {\n        const instanceId = c.getInstanceId();\n        if (!prev.instanceIdMap.has(instanceId)) {\n            newCellCtrls.push(c);\n            newInstanceIdMap.set(instanceId, c);\n        }\n    });\n    const res = {\n        list: [...oldCellCtrls, ...newCellCtrls],\n        instanceIdMap: newInstanceIdMap\n    };\n    return res;\n};\nconst RowComp = (params) => {\n    const { context } = useContext(BeansContext);\n    const { rowCtrl, containerType } = params;\n    const [rowIndex, setRowIndex] = useState();\n    const [rowId, setRowId] = useState();\n    const [role, setRole] = useState();\n    const [rowBusinessKey, setRowBusinessKey] = useState();\n    const [tabIndex, setTabIndex] = useState();\n    const [userStyles, setUserStyles] = useState();\n    const [cellCtrls, setCellCtrls] = useState({ list: [], instanceIdMap: new Map() });\n    const [fullWidthCompDetails, setFullWidthCompDetails] = useState();\n    const [domOrder, setDomOrder] = useState(false);\n    // these styles have initial values, so element is placed into the DOM with them,\n    // rather than an transition getting applied.\n    const [top, setTop] = useState(rowCtrl.getInitialRowTop(containerType));\n    const [transform, setTransform] = useState(rowCtrl.getInitialTransform(containerType));\n    const eGui = useRef(null);\n    const fullWidthCompRef = useRef();\n    const autoHeightSetup = useRef(false);\n    const [autoHeightSetupAttempt, setAutoHeightSetupAttempt] = useState(0);\n    // puts autoHeight onto full with detail rows. this needs trickery, as we need\n    // the HTMLElement for the provided Detail Cell Renderer, however the Detail Cell Renderer\n    // could be a stateless React Func Comp which won't work with useRef, so we need\n    // to poll (we limit to 10) looking for the Detail HTMLElement (which will be the only\n    // child) after the fullWidthCompDetails is set.\n    useEffect(() => {\n        var _a;\n        if (autoHeightSetup.current) {\n            return;\n        }\n        if (!fullWidthCompDetails) {\n            return;\n        }\n        if (autoHeightSetupAttempt > 10) {\n            return;\n        }\n        const eChild = (_a = eGui.current) === null || _a === void 0 ? void 0 : _a.firstChild;\n        if (eChild) {\n            rowCtrl.setupDetailRowAutoHeight(eChild);\n            autoHeightSetup.current = true;\n        }\n        else {\n            setAutoHeightSetupAttempt(prev => prev + 1);\n        }\n    }, [fullWidthCompDetails, autoHeightSetupAttempt]);\n    const cssClassManager = useMemo(() => new CssClassManager(() => eGui.current), []);\n    // we use layout effect here as we want to synchronously process setComp and it's side effects\n    // to ensure the component is fully initialised prior to the first browser paint. See AG-7018.\n    useLayoutEffectOnce(() => {\n        // because React is asynchronous, it's possible the RowCtrl is no longer a valid RowCtrl. This can\n        // happen if user calls two API methods one after the other, with the second API invalidating the rows\n        // the first call created. Thus the rows for the first call could still get created even though no longer needed.\n        if (!rowCtrl.isAlive()) {\n            return;\n        }\n        const compProxy = {\n            // the rowTop is managed by state, instead of direct style manipulation by rowCtrl (like all the other styles)\n            // as we need to have an initial value when it's placed into he DOM for the first time, for animation to work.\n            setTop: value => setTop(value),\n            setTransform: value => setTransform(value),\n            // i found using React for managing classes at the row level was to slow, as modifying classes caused a lot of\n            // React code to execute, so avoiding React for managing CSS Classes made the grid go much faster.\n            addOrRemoveCssClass: (name, on) => cssClassManager.addOrRemoveCssClass(name, on),\n            setDomOrder: domOrder => setDomOrder(domOrder),\n            setRowIndex: value => setRowIndex(value),\n            setRowId: value => setRowId(value),\n            setRowBusinessKey: value => setRowBusinessKey(value),\n            setTabIndex: value => setTabIndex(value),\n            setUserStyles: (styles) => setUserStyles(styles),\n            setRole: value => setRole(value),\n            // if we don't maintain the order, then cols will be ripped out and into the dom\n            // when cols reordered, which would stop the CSS transitions from working\n            setCellCtrls: (next, useFlushSync) => {\n                agFlushSync(useFlushSync, () => {\n                    setCellCtrls(prev => maintainOrderOnColumns(prev, next, domOrder));\n                });\n            },\n            showFullWidth: compDetails => setFullWidthCompDetails(compDetails),\n            getFullWidthCellRenderer: () => fullWidthCompRef.current,\n        };\n        rowCtrl.setComp(compProxy, eGui.current, containerType);\n        return () => {\n            rowCtrl.unsetComp(containerType);\n        };\n    });\n    useLayoutEffect(() => showJsComp(fullWidthCompDetails, context, eGui.current, fullWidthCompRef), [fullWidthCompDetails]);\n    const rowStyles = useMemo(() => {\n        const res = { top, transform };\n        Object.assign(res, userStyles);\n        return res;\n    }, [top, transform, userStyles]);\n    const showFullWidthFramework = fullWidthCompDetails && fullWidthCompDetails.componentFromFramework;\n    const showCells = cellCtrls != null;\n    const reactFullWidthCellRendererStateless = useMemo(() => {\n        const res = (fullWidthCompDetails === null || fullWidthCompDetails === void 0 ? void 0 : fullWidthCompDetails.componentFromFramework) && isComponentStateless(fullWidthCompDetails.componentClass);\n        return !!res;\n    }, [fullWidthCompDetails]);\n    const showCellsJsx = () => cellCtrls.list.map(cellCtrl => (React.createElement(CellComp, { cellCtrl: cellCtrl, editingRow: rowCtrl.isEditing(), printLayout: rowCtrl.isPrintLayout(), key: cellCtrl.getInstanceId() })));\n    const showFullWidthFrameworkJsx = () => {\n        const FullWidthComp = fullWidthCompDetails.componentClass;\n        return (React.createElement(React.Fragment, null,\n            reactFullWidthCellRendererStateless\n                && React.createElement(FullWidthComp, Object.assign({}, fullWidthCompDetails.params)),\n            !reactFullWidthCellRendererStateless\n                && React.createElement(FullWidthComp, Object.assign({}, fullWidthCompDetails.params, { ref: fullWidthCompRef }))));\n    };\n    return (React.createElement(\"div\", { ref: eGui, role: role, style: rowStyles, \"row-index\": rowIndex, \"row-id\": rowId, \"row-business-key\": rowBusinessKey, tabIndex: tabIndex },\n        showCells && showCellsJsx(),\n        showFullWidthFramework && showFullWidthFrameworkJsx()));\n};\nexport default memo(RowComp);\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}