{"ast":null,"code":"// ag-grid-react v30.0.4\nimport { CssClassManager, GridBodyCtrl, RowContainerName, _ } from 'ag-grid-community';\nimport React, { memo, useContext, useMemo, useRef, useState } from 'react';\nimport { BeansContext } from './beansContext.mjs';\nimport GridHeaderComp from './header/gridHeaderComp.mjs';\nimport useReactCommentEffect from './reactComment.mjs';\nimport RowContainerComp from './rows/rowContainerComp.mjs';\nimport { useLayoutEffectOnce } from './useEffectOnce.mjs';\nimport { classesList } from './utils.mjs';\nconst GridBodyComp = () => {\n  const {\n    context,\n    agStackComponentsRegistry,\n    resizeObserverService\n  } = useContext(BeansContext);\n  const [rowAnimationClass, setRowAnimationClass] = useState('');\n  const [topHeight, setTopHeight] = useState(0);\n  const [bottomHeight, setBottomHeight] = useState(0);\n  const [stickyTopHeight, setStickyTopHeight] = useState('0px');\n  const [stickyTopTop, setStickyTopTop] = useState('0px');\n  const [stickyTopWidth, setStickyTopWidth] = useState('100%');\n  const [topDisplay, setTopDisplay] = useState('');\n  const [bottomDisplay, setBottomDisplay] = useState('');\n  const [forceVerticalScrollClass, setForceVerticalScrollClass] = useState(null);\n  const [topAndBottomOverflowY, setTopAndBottomOverflowY] = useState('');\n  const [cellSelectableCss, setCellSelectableCss] = useState(null);\n  // we initialise layoutClass to 'ag-layout-normal', because if we don't, the comp will initially\n  // render with no width (as ag-layout-normal sets width to 0, which is needed for flex) which\n  // gives the grid a massive width, which then renders a massive amount of columns. this problem\n  // is due to React been async, for the non-async version (ie when not using React) this is not a\n  // problem as the UI will finish initialising before we set data.\n  const [layoutClass, setLayoutClass] = useState('ag-layout-normal');\n  const cssClassManager = useMemo(() => new CssClassManager(() => eRoot.current), []);\n  const eRoot = useRef(null);\n  const eTop = useRef(null);\n  const eStickyTop = useRef(null);\n  const eBody = useRef(null);\n  const eBodyViewport = useRef(null);\n  const eBottom = useRef(null);\n  useReactCommentEffect(' AG Grid Body ', eRoot);\n  useReactCommentEffect(' AG Pinned Top ', eTop);\n  useReactCommentEffect(' AG Sticky Top ', eStickyTop);\n  useReactCommentEffect(' AG Middle ', eBodyViewport);\n  useReactCommentEffect(' AG Pinned Bottom ', eBottom);\n  useLayoutEffectOnce(() => {\n    const beansToDestroy = [];\n    const destroyFuncs = [];\n    if (!context) {\n      return;\n    }\n    const newComp = tag => {\n      const CompClass = agStackComponentsRegistry.getComponentClass(tag);\n      const comp = context.createBean(new CompClass());\n      beansToDestroy.push(comp);\n      return comp;\n    };\n    if (eRoot.current) {\n      eRoot.current.appendChild(document.createComment(' AG Fake Horizontal Scroll '));\n      eRoot.current.appendChild(newComp('AG-FAKE-HORIZONTAL-SCROLL').getGui());\n      eRoot.current.appendChild(document.createComment(' AG Overlay Wrapper '));\n      eRoot.current.appendChild(newComp('AG-OVERLAY-WRAPPER').getGui());\n    }\n    if (eBody.current) {\n      eBody.current.appendChild(document.createComment(' AG Fake Vertical Scroll '));\n      eBody.current.appendChild(newComp('AG-FAKE-VERTICAL-SCROLL').getGui());\n    }\n    const compProxy = {\n      setRowAnimationCssOnBodyViewport: setRowAnimationClass,\n      setColumnCount: count => _.setAriaColCount(eRoot.current, count),\n      setRowCount: count => _.setAriaRowCount(eRoot.current, count),\n      setTopHeight,\n      setBottomHeight,\n      setStickyTopHeight,\n      setStickyTopTop,\n      setStickyTopWidth,\n      setTopDisplay,\n      setBottomDisplay,\n      setColumnMovingCss: (cssClass, flag) => cssClassManager.addOrRemoveCssClass(cssClass, flag),\n      updateLayoutClasses: setLayoutClass,\n      setAlwaysVerticalScrollClass: setForceVerticalScrollClass,\n      setPinnedTopBottomOverflowY: setTopAndBottomOverflowY,\n      setCellSelectableCss: (cssClass, flag) => setCellSelectableCss(flag ? cssClass : null),\n      setBodyViewportWidth: width => {\n        if (eBodyViewport.current) {\n          eBodyViewport.current.style.width = width;\n        }\n      },\n      registerBodyViewportResizeListener: listener => {\n        const unsubscribeFromResize = resizeObserverService.observeResize(eBodyViewport.current, listener);\n        destroyFuncs.push(() => unsubscribeFromResize());\n      }\n    };\n    const ctrl = context.createBean(new GridBodyCtrl());\n    beansToDestroy.push(ctrl);\n    ctrl.setComp(compProxy, eRoot.current, eBodyViewport.current, eTop.current, eBottom.current, eStickyTop.current);\n    return () => {\n      context.destroyBeans(beansToDestroy);\n      destroyFuncs.forEach(f => f());\n    };\n  });\n  const rootClasses = useMemo(() => classesList('ag-root', 'ag-unselectable', layoutClass), [layoutClass]);\n  const bodyViewportClasses = useMemo(() => classesList('ag-body-viewport', rowAnimationClass, layoutClass, forceVerticalScrollClass, cellSelectableCss), [rowAnimationClass, layoutClass, forceVerticalScrollClass, cellSelectableCss]);\n  const bodyClasses = useMemo(() => classesList('ag-body', layoutClass), [layoutClass]);\n  const bodyClipperClasses = useMemo(() => classesList('ag-body-clipper', layoutClass), [layoutClass]);\n  const topClasses = useMemo(() => classesList('ag-floating-top', cellSelectableCss), [cellSelectableCss]);\n  const stickyTopClasses = useMemo(() => classesList('ag-sticky-top', cellSelectableCss), [cellSelectableCss]);\n  const bottomClasses = useMemo(() => classesList('ag-floating-bottom', cellSelectableCss), [cellSelectableCss]);\n  const topStyle = useMemo(() => ({\n    height: topHeight,\n    minHeight: topHeight,\n    display: topDisplay,\n    overflowY: topAndBottomOverflowY\n  }), [topHeight, topDisplay, topAndBottomOverflowY]);\n  const stickyTopStyle = useMemo(() => ({\n    height: stickyTopHeight,\n    top: stickyTopTop,\n    width: stickyTopWidth\n  }), [stickyTopHeight, stickyTopTop, stickyTopWidth]);\n  const bottomStyle = useMemo(() => ({\n    height: bottomHeight,\n    minHeight: bottomHeight,\n    display: bottomDisplay,\n    overflowY: topAndBottomOverflowY\n  }), [bottomHeight, bottomDisplay, topAndBottomOverflowY]);\n  const createRowContainer = container => React.createElement(RowContainerComp, {\n    name: container,\n    key: `${container}-container`\n  });\n  const createSection = _ref => {\n    let {\n      section,\n      children,\n      className,\n      style\n    } = _ref;\n    return React.createElement(\"div\", {\n      ref: section,\n      className: className,\n      role: \"presentation\",\n      style: style\n    }, children.map(createRowContainer));\n  };\n  return React.createElement(\"div\", {\n    ref: eRoot,\n    className: rootClasses,\n    role: \"treegrid\"\n  }, React.createElement(GridHeaderComp, null), createSection({\n    section: eTop,\n    className: topClasses,\n    style: topStyle,\n    children: [RowContainerName.TOP_LEFT, RowContainerName.TOP_CENTER, RowContainerName.TOP_RIGHT, RowContainerName.TOP_FULL_WIDTH]\n  }), React.createElement(\"div\", {\n    className: bodyClasses,\n    ref: eBody,\n    role: \"presentation\"\n  }, React.createElement(\"div\", {\n    className: bodyClipperClasses,\n    role: \"presentation\"\n  }, createSection({\n    section: eBodyViewport,\n    className: bodyViewportClasses,\n    children: [RowContainerName.LEFT, RowContainerName.CENTER, RowContainerName.RIGHT, RowContainerName.FULL_WIDTH]\n  }))), createSection({\n    section: eStickyTop,\n    className: stickyTopClasses,\n    style: stickyTopStyle,\n    children: [RowContainerName.STICKY_TOP_LEFT, RowContainerName.STICKY_TOP_CENTER, RowContainerName.STICKY_TOP_RIGHT, RowContainerName.STICKY_TOP_FULL_WIDTH]\n  }), createSection({\n    section: eBottom,\n    className: bottomClasses,\n    style: bottomStyle,\n    children: [RowContainerName.BOTTOM_LEFT, RowContainerName.BOTTOM_CENTER, RowContainerName.BOTTOM_RIGHT, RowContainerName.BOTTOM_FULL_WIDTH]\n  }));\n};\nexport default memo(GridBodyComp);","map":{"version":3,"names":["CssClassManager","GridBodyCtrl","RowContainerName","_","React","memo","useContext","useMemo","useRef","useState","BeansContext","GridHeaderComp","useReactCommentEffect","RowContainerComp","useLayoutEffectOnce","classesList","GridBodyComp","context","agStackComponentsRegistry","resizeObserverService","rowAnimationClass","setRowAnimationClass","topHeight","setTopHeight","bottomHeight","setBottomHeight","stickyTopHeight","setStickyTopHeight","stickyTopTop","setStickyTopTop","stickyTopWidth","setStickyTopWidth","topDisplay","setTopDisplay","bottomDisplay","setBottomDisplay","forceVerticalScrollClass","setForceVerticalScrollClass","topAndBottomOverflowY","setTopAndBottomOverflowY","cellSelectableCss","setCellSelectableCss","layoutClass","setLayoutClass","cssClassManager","eRoot","current","eTop","eStickyTop","eBody","eBodyViewport","eBottom","beansToDestroy","destroyFuncs","newComp","tag","CompClass","getComponentClass","comp","createBean","push","appendChild","document","createComment","getGui","compProxy","setRowAnimationCssOnBodyViewport","setColumnCount","count","setAriaColCount","setRowCount","setAriaRowCount","setColumnMovingCss","cssClass","flag","addOrRemoveCssClass","updateLayoutClasses","setAlwaysVerticalScrollClass","setPinnedTopBottomOverflowY","setBodyViewportWidth","width","style","registerBodyViewportResizeListener","listener","unsubscribeFromResize","observeResize","ctrl","setComp","destroyBeans","forEach","f","rootClasses","bodyViewportClasses","bodyClasses","bodyClipperClasses","topClasses","stickyTopClasses","bottomClasses","topStyle","height","minHeight","display","overflowY","stickyTopStyle","top","bottomStyle","createRowContainer","container","createElement","name","key","createSection","_ref","section","children","className","ref","role","map","TOP_LEFT","TOP_CENTER","TOP_RIGHT","TOP_FULL_WIDTH","LEFT","CENTER","RIGHT","FULL_WIDTH","STICKY_TOP_LEFT","STICKY_TOP_CENTER","STICKY_TOP_RIGHT","STICKY_TOP_FULL_WIDTH","BOTTOM_LEFT","BOTTOM_CENTER","BOTTOM_RIGHT","BOTTOM_FULL_WIDTH"],"sources":["/home/vvdn/React-practice/hello/node_modules/ag-grid-react/lib/reactUi/gridBodyComp.mjs"],"sourcesContent":["// ag-grid-react v30.0.4\nimport { CssClassManager, GridBodyCtrl, RowContainerName, _ } from 'ag-grid-community';\nimport React, { memo, useContext, useMemo, useRef, useState } from 'react';\nimport { BeansContext } from './beansContext.mjs';\nimport GridHeaderComp from './header/gridHeaderComp.mjs';\nimport useReactCommentEffect from './reactComment.mjs';\nimport RowContainerComp from './rows/rowContainerComp.mjs';\nimport { useLayoutEffectOnce } from './useEffectOnce.mjs';\nimport { classesList } from './utils.mjs';\nconst GridBodyComp = () => {\n    const { context, agStackComponentsRegistry, resizeObserverService } = useContext(BeansContext);\n    const [rowAnimationClass, setRowAnimationClass] = useState('');\n    const [topHeight, setTopHeight] = useState(0);\n    const [bottomHeight, setBottomHeight] = useState(0);\n    const [stickyTopHeight, setStickyTopHeight] = useState('0px');\n    const [stickyTopTop, setStickyTopTop] = useState('0px');\n    const [stickyTopWidth, setStickyTopWidth] = useState('100%');\n    const [topDisplay, setTopDisplay] = useState('');\n    const [bottomDisplay, setBottomDisplay] = useState('');\n    const [forceVerticalScrollClass, setForceVerticalScrollClass] = useState(null);\n    const [topAndBottomOverflowY, setTopAndBottomOverflowY] = useState('');\n    const [cellSelectableCss, setCellSelectableCss] = useState(null);\n    // we initialise layoutClass to 'ag-layout-normal', because if we don't, the comp will initially\n    // render with no width (as ag-layout-normal sets width to 0, which is needed for flex) which\n    // gives the grid a massive width, which then renders a massive amount of columns. this problem\n    // is due to React been async, for the non-async version (ie when not using React) this is not a\n    // problem as the UI will finish initialising before we set data.\n    const [layoutClass, setLayoutClass] = useState('ag-layout-normal');\n    const cssClassManager = useMemo(() => new CssClassManager(() => eRoot.current), []);\n    const eRoot = useRef(null);\n    const eTop = useRef(null);\n    const eStickyTop = useRef(null);\n    const eBody = useRef(null);\n    const eBodyViewport = useRef(null);\n    const eBottom = useRef(null);\n    useReactCommentEffect(' AG Grid Body ', eRoot);\n    useReactCommentEffect(' AG Pinned Top ', eTop);\n    useReactCommentEffect(' AG Sticky Top ', eStickyTop);\n    useReactCommentEffect(' AG Middle ', eBodyViewport);\n    useReactCommentEffect(' AG Pinned Bottom ', eBottom);\n    useLayoutEffectOnce(() => {\n        const beansToDestroy = [];\n        const destroyFuncs = [];\n        if (!context) {\n            return;\n        }\n        const newComp = (tag) => {\n            const CompClass = agStackComponentsRegistry.getComponentClass(tag);\n            const comp = context.createBean(new CompClass());\n            beansToDestroy.push(comp);\n            return comp;\n        };\n        if (eRoot.current) {\n            eRoot.current.appendChild(document.createComment(' AG Fake Horizontal Scroll '));\n            eRoot.current.appendChild(newComp('AG-FAKE-HORIZONTAL-SCROLL').getGui());\n            eRoot.current.appendChild(document.createComment(' AG Overlay Wrapper '));\n            eRoot.current.appendChild(newComp('AG-OVERLAY-WRAPPER').getGui());\n        }\n        if (eBody.current) {\n            eBody.current.appendChild(document.createComment(' AG Fake Vertical Scroll '));\n            eBody.current.appendChild(newComp('AG-FAKE-VERTICAL-SCROLL').getGui());\n        }\n        const compProxy = {\n            setRowAnimationCssOnBodyViewport: setRowAnimationClass,\n            setColumnCount: count => _.setAriaColCount(eRoot.current, count),\n            setRowCount: count => _.setAriaRowCount(eRoot.current, count),\n            setTopHeight,\n            setBottomHeight,\n            setStickyTopHeight,\n            setStickyTopTop,\n            setStickyTopWidth,\n            setTopDisplay,\n            setBottomDisplay,\n            setColumnMovingCss: (cssClass, flag) => cssClassManager.addOrRemoveCssClass(cssClass, flag),\n            updateLayoutClasses: setLayoutClass,\n            setAlwaysVerticalScrollClass: setForceVerticalScrollClass,\n            setPinnedTopBottomOverflowY: setTopAndBottomOverflowY,\n            setCellSelectableCss: (cssClass, flag) => setCellSelectableCss(flag ? cssClass : null),\n            setBodyViewportWidth: (width) => {\n                if (eBodyViewport.current) {\n                    eBodyViewport.current.style.width = width;\n                }\n            },\n            registerBodyViewportResizeListener: listener => {\n                const unsubscribeFromResize = resizeObserverService.observeResize(eBodyViewport.current, listener);\n                destroyFuncs.push(() => unsubscribeFromResize());\n            }\n        };\n        const ctrl = context.createBean(new GridBodyCtrl());\n        beansToDestroy.push(ctrl);\n        ctrl.setComp(compProxy, eRoot.current, eBodyViewport.current, eTop.current, eBottom.current, eStickyTop.current);\n        return () => {\n            context.destroyBeans(beansToDestroy);\n            destroyFuncs.forEach(f => f());\n        };\n    });\n    const rootClasses = useMemo(() => classesList('ag-root', 'ag-unselectable', layoutClass), [layoutClass]);\n    const bodyViewportClasses = useMemo(() => classesList('ag-body-viewport', rowAnimationClass, layoutClass, forceVerticalScrollClass, cellSelectableCss), [rowAnimationClass, layoutClass, forceVerticalScrollClass, cellSelectableCss]);\n    const bodyClasses = useMemo(() => classesList('ag-body', layoutClass), [layoutClass]);\n    const bodyClipperClasses = useMemo(() => classesList('ag-body-clipper', layoutClass), [layoutClass]);\n    const topClasses = useMemo(() => classesList('ag-floating-top', cellSelectableCss), [cellSelectableCss]);\n    const stickyTopClasses = useMemo(() => classesList('ag-sticky-top', cellSelectableCss), [cellSelectableCss]);\n    const bottomClasses = useMemo(() => classesList('ag-floating-bottom', cellSelectableCss), [cellSelectableCss]);\n    const topStyle = useMemo(() => ({\n        height: topHeight,\n        minHeight: topHeight,\n        display: topDisplay,\n        overflowY: topAndBottomOverflowY\n    }), [topHeight, topDisplay, topAndBottomOverflowY]);\n    const stickyTopStyle = useMemo(() => ({\n        height: stickyTopHeight,\n        top: stickyTopTop,\n        width: stickyTopWidth\n    }), [stickyTopHeight, stickyTopTop, stickyTopWidth]);\n    const bottomStyle = useMemo(() => ({\n        height: bottomHeight,\n        minHeight: bottomHeight,\n        display: bottomDisplay,\n        overflowY: topAndBottomOverflowY\n    }), [bottomHeight, bottomDisplay, topAndBottomOverflowY]);\n    const createRowContainer = (container) => React.createElement(RowContainerComp, { name: container, key: `${container}-container` });\n    const createSection = ({ section, children, className, style }) => (React.createElement(\"div\", { ref: section, className: className, role: \"presentation\", style: style }, children.map(createRowContainer)));\n    return (React.createElement(\"div\", { ref: eRoot, className: rootClasses, role: \"treegrid\" },\n        React.createElement(GridHeaderComp, null),\n        createSection({ section: eTop, className: topClasses, style: topStyle, children: [\n                RowContainerName.TOP_LEFT,\n                RowContainerName.TOP_CENTER,\n                RowContainerName.TOP_RIGHT,\n                RowContainerName.TOP_FULL_WIDTH,\n            ] }),\n        React.createElement(\"div\", { className: bodyClasses, ref: eBody, role: \"presentation\" },\n            React.createElement(\"div\", { className: bodyClipperClasses, role: \"presentation\" }, createSection({ section: eBodyViewport, className: bodyViewportClasses,\n                children: [\n                    RowContainerName.LEFT,\n                    RowContainerName.CENTER,\n                    RowContainerName.RIGHT,\n                    RowContainerName.FULL_WIDTH,\n                ] }))),\n        createSection({ section: eStickyTop, className: stickyTopClasses, style: stickyTopStyle, children: [\n                RowContainerName.STICKY_TOP_LEFT,\n                RowContainerName.STICKY_TOP_CENTER,\n                RowContainerName.STICKY_TOP_RIGHT,\n                RowContainerName.STICKY_TOP_FULL_WIDTH,\n            ] }),\n        createSection({ section: eBottom, className: bottomClasses, style: bottomStyle, children: [\n                RowContainerName.BOTTOM_LEFT,\n                RowContainerName.BOTTOM_CENTER,\n                RowContainerName.BOTTOM_RIGHT,\n                RowContainerName.BOTTOM_FULL_WIDTH,\n            ] })));\n};\nexport default memo(GridBodyComp);\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}