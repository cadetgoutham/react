{"ast":null,"code":"// ag-grid-react v30.0.4\nimport React, { useState, useMemo, useRef, useContext, useCallback, forwardRef, useImperativeHandle } from \"react\";\nimport { CssClasses } from \"../utils.mjs\";\nimport { BeansContext } from \"../beansContext.mjs\";\nimport { AgGridReactUi } from \"../agGridReactUi.mjs\";\nimport { useLayoutEffectOnce } from \"../useEffectOnce.mjs\";\nconst DetailCellRenderer = (props, ref) => {\n  const {\n    ctrlsFactory,\n    context,\n    gridOptionsService,\n    resizeObserverService,\n    clientSideRowModel,\n    serverSideRowModel\n  } = useContext(BeansContext);\n  const [cssClasses, setCssClasses] = useState(new CssClasses());\n  const [gridCssClasses, setGridCssClasses] = useState(new CssClasses());\n  const [detailGridOptions, setDetailGridOptions] = useState();\n  const [detailRowData, setDetailRowData] = useState();\n  const ctrlRef = useRef();\n  const eGuiRef = useRef(null);\n  const topClassName = useMemo(() => cssClasses.toString() + ' ag-details-row', [cssClasses]);\n  const gridClassName = useMemo(() => gridCssClasses.toString() + ' ag-details-grid', [gridCssClasses]);\n  if (ref) {\n    useImperativeHandle(ref, () => ({\n      refresh() {\n        var _a, _b;\n        return (_b = (_a = ctrlRef.current) === null || _a === void 0 ? void 0 : _a.refresh()) !== null && _b !== void 0 ? _b : false;\n      }\n    }));\n  }\n  useLayoutEffectOnce(() => {\n    if (props.template && typeof props.template === 'string') {\n      console.warn('AG Grid: detailCellRendererParams.template is not supported by React - this only works with frameworks that work against String templates. To change the template, please provide your own React Detail Cell Renderer.');\n    }\n  });\n  useLayoutEffectOnce(() => {\n    const compProxy = {\n      addOrRemoveCssClass: (name, on) => setCssClasses(prev => prev.setClass(name, on)),\n      addOrRemoveDetailGridCssClass: (name, on) => setGridCssClasses(prev => prev.setClass(name, on)),\n      setDetailGrid: gridOptions => setDetailGridOptions(gridOptions),\n      setRowData: rowData => setDetailRowData(rowData),\n      getGui: () => eGuiRef.current\n    };\n    const ctrl = ctrlsFactory.getInstance('detailCellRenderer');\n    if (!ctrl) {\n      return;\n    } // should never happen, means master/detail module not loaded\n    context.createBean(ctrl);\n    ctrl.init(compProxy, props);\n    ctrlRef.current = ctrl;\n    let resizeObserverDestroyFunc;\n    if (gridOptionsService.is('detailRowAutoHeight')) {\n      const checkRowSizeFunc = () => {\n        // when disposed, current is null, so nothing to do, and the resize observer will\n        // be disposed of soon\n        if (eGuiRef.current == null) {\n          return;\n        }\n        const clientHeight = eGuiRef.current.clientHeight;\n        // if the UI is not ready, the height can be 0, which we ignore, as otherwise a flicker will occur\n        // as UI goes from the default height, to 0, then to the real height as UI becomes ready. this means\n        // it's not possible for have 0 as auto-height, however this is an improbable use case, as even an\n        // empty detail grid would still have some styling around it giving at least a few pixels.\n        if (clientHeight != null && clientHeight > 0) {\n          // we do the update in a timeout, to make sure we are not calling from inside the grid\n          // doing another update\n          const updateRowHeightFunc = () => {\n            props.node.setRowHeight(clientHeight);\n            if (clientSideRowModel) {\n              clientSideRowModel.onRowHeightChanged();\n            } else if (serverSideRowModel) {\n              serverSideRowModel.onRowHeightChanged();\n            }\n          };\n          setTimeout(updateRowHeightFunc, 0);\n        }\n      };\n      resizeObserverDestroyFunc = resizeObserverService.observeResize(eGuiRef.current, checkRowSizeFunc);\n      checkRowSizeFunc();\n    }\n    return () => {\n      context.destroyBean(ctrl);\n      if (resizeObserverDestroyFunc) {\n        resizeObserverDestroyFunc();\n      }\n    };\n  });\n  const setGridApi = useCallback((api, columnApi) => {\n    var _a;\n    (_a = ctrlRef.current) === null || _a === void 0 ? void 0 : _a.registerDetailWithMaster(api, columnApi);\n  }, []);\n  return React.createElement(\"div\", {\n    className: topClassName,\n    ref: eGuiRef\n  }, detailGridOptions && React.createElement(AgGridReactUi, Object.assign({\n    className: gridClassName\n  }, detailGridOptions, {\n    rowData: detailRowData,\n    setGridApi: setGridApi\n  })));\n};\nexport default forwardRef(DetailCellRenderer);","map":{"version":3,"names":["React","useState","useMemo","useRef","useContext","useCallback","forwardRef","useImperativeHandle","CssClasses","BeansContext","AgGridReactUi","useLayoutEffectOnce","DetailCellRenderer","props","ref","ctrlsFactory","context","gridOptionsService","resizeObserverService","clientSideRowModel","serverSideRowModel","cssClasses","setCssClasses","gridCssClasses","setGridCssClasses","detailGridOptions","setDetailGridOptions","detailRowData","setDetailRowData","ctrlRef","eGuiRef","topClassName","toString","gridClassName","refresh","_a","_b","current","template","console","warn","compProxy","addOrRemoveCssClass","name","on","prev","setClass","addOrRemoveDetailGridCssClass","setDetailGrid","gridOptions","setRowData","rowData","getGui","ctrl","getInstance","createBean","init","resizeObserverDestroyFunc","is","checkRowSizeFunc","clientHeight","updateRowHeightFunc","node","setRowHeight","onRowHeightChanged","setTimeout","observeResize","destroyBean","setGridApi","api","columnApi","registerDetailWithMaster","createElement","className","Object","assign"],"sources":["/home/vvdn/React-practice/hello/node_modules/ag-grid-react/lib/reactUi/cellRenderer/detailCellRenderer.mjs"],"sourcesContent":["// ag-grid-react v30.0.4\nimport React, { useState, useMemo, useRef, useContext, useCallback, forwardRef, useImperativeHandle } from \"react\";\nimport { CssClasses } from \"../utils.mjs\";\nimport { BeansContext } from \"../beansContext.mjs\";\nimport { AgGridReactUi } from \"../agGridReactUi.mjs\";\nimport { useLayoutEffectOnce } from \"../useEffectOnce.mjs\";\nconst DetailCellRenderer = (props, ref) => {\n    const { ctrlsFactory, context, gridOptionsService, resizeObserverService, clientSideRowModel, serverSideRowModel } = useContext(BeansContext);\n    const [cssClasses, setCssClasses] = useState(new CssClasses());\n    const [gridCssClasses, setGridCssClasses] = useState(new CssClasses());\n    const [detailGridOptions, setDetailGridOptions] = useState();\n    const [detailRowData, setDetailRowData] = useState();\n    const ctrlRef = useRef();\n    const eGuiRef = useRef(null);\n    const topClassName = useMemo(() => cssClasses.toString() + ' ag-details-row', [cssClasses]);\n    const gridClassName = useMemo(() => gridCssClasses.toString() + ' ag-details-grid', [gridCssClasses]);\n    if (ref) {\n        useImperativeHandle(ref, () => ({\n            refresh() { var _a, _b; return (_b = (_a = ctrlRef.current) === null || _a === void 0 ? void 0 : _a.refresh()) !== null && _b !== void 0 ? _b : false; }\n        }));\n    }\n    useLayoutEffectOnce(() => {\n        if (props.template && typeof props.template === 'string') {\n            console.warn('AG Grid: detailCellRendererParams.template is not supported by React - this only works with frameworks that work against String templates. To change the template, please provide your own React Detail Cell Renderer.');\n        }\n    });\n    useLayoutEffectOnce(() => {\n        const compProxy = {\n            addOrRemoveCssClass: (name, on) => setCssClasses(prev => prev.setClass(name, on)),\n            addOrRemoveDetailGridCssClass: (name, on) => setGridCssClasses(prev => prev.setClass(name, on)),\n            setDetailGrid: gridOptions => setDetailGridOptions(gridOptions),\n            setRowData: rowData => setDetailRowData(rowData),\n            getGui: () => eGuiRef.current\n        };\n        const ctrl = ctrlsFactory.getInstance('detailCellRenderer');\n        if (!ctrl) {\n            return;\n        } // should never happen, means master/detail module not loaded\n        context.createBean(ctrl);\n        ctrl.init(compProxy, props);\n        ctrlRef.current = ctrl;\n        let resizeObserverDestroyFunc;\n        if (gridOptionsService.is('detailRowAutoHeight')) {\n            const checkRowSizeFunc = () => {\n                // when disposed, current is null, so nothing to do, and the resize observer will\n                // be disposed of soon\n                if (eGuiRef.current == null) {\n                    return;\n                }\n                const clientHeight = eGuiRef.current.clientHeight;\n                // if the UI is not ready, the height can be 0, which we ignore, as otherwise a flicker will occur\n                // as UI goes from the default height, to 0, then to the real height as UI becomes ready. this means\n                // it's not possible for have 0 as auto-height, however this is an improbable use case, as even an\n                // empty detail grid would still have some styling around it giving at least a few pixels.\n                if (clientHeight != null && clientHeight > 0) {\n                    // we do the update in a timeout, to make sure we are not calling from inside the grid\n                    // doing another update\n                    const updateRowHeightFunc = () => {\n                        props.node.setRowHeight(clientHeight);\n                        if (clientSideRowModel) {\n                            clientSideRowModel.onRowHeightChanged();\n                        }\n                        else if (serverSideRowModel) {\n                            serverSideRowModel.onRowHeightChanged();\n                        }\n                    };\n                    setTimeout(updateRowHeightFunc, 0);\n                }\n            };\n            resizeObserverDestroyFunc = resizeObserverService.observeResize(eGuiRef.current, checkRowSizeFunc);\n            checkRowSizeFunc();\n        }\n        return () => {\n            context.destroyBean(ctrl);\n            if (resizeObserverDestroyFunc) {\n                resizeObserverDestroyFunc();\n            }\n        };\n    });\n    const setGridApi = useCallback((api, columnApi) => {\n        var _a;\n        (_a = ctrlRef.current) === null || _a === void 0 ? void 0 : _a.registerDetailWithMaster(api, columnApi);\n    }, []);\n    return (React.createElement(\"div\", { className: topClassName, ref: eGuiRef }, detailGridOptions &&\n        React.createElement(AgGridReactUi, Object.assign({ className: gridClassName }, detailGridOptions, { rowData: detailRowData, setGridApi: setGridApi }))));\n};\nexport default forwardRef(DetailCellRenderer);\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}