{"ast":null,"code":"// ag-grid-react v30.0.4\nimport { useCallback, useContext, useEffect } from 'react';\nimport { BeansContext } from '../beansContext.mjs';\nimport { useEffectOnce } from '../useEffectOnce.mjs';\nconst useJsCellRenderer = (showDetails, showTools, eCellValue, cellValueVersion, jsCellRendererRef, eGui) => {\n  const {\n    context,\n    userComponentFactory\n  } = useContext(BeansContext);\n  const destroyCellRenderer = useCallback(() => {\n    const comp = jsCellRendererRef.current;\n    if (!comp) {\n      return;\n    }\n    const compGui = comp.getGui();\n    if (compGui && compGui.parentElement) {\n      compGui.parentElement.removeChild(compGui);\n    }\n    context.destroyBean(comp);\n    jsCellRendererRef.current = undefined;\n  }, []);\n  // create or refresh JS cell renderer\n  useEffect(() => {\n    const showValue = showDetails != null;\n    const jsCompDetails = showDetails && showDetails.compDetails && !showDetails.compDetails.componentFromFramework;\n    const waitingForToolsSetup = showTools && eCellValue == null;\n    const showComp = showValue && jsCompDetails && !waitingForToolsSetup;\n    // if not showing comp, destroy any existing one and return\n    if (!showComp) {\n      destroyCellRenderer();\n      return;\n    }\n    const compDetails = showDetails.compDetails;\n    if (jsCellRendererRef.current) {\n      // attempt refresh if refresh method exists\n      const comp = jsCellRendererRef.current;\n      const attemptRefresh = comp.refresh != null && showDetails.force == false;\n      const refreshResult = attemptRefresh ? comp.refresh(compDetails.params) : false;\n      const refreshWorked = refreshResult === true || refreshResult === undefined;\n      // if refresh worked, nothing else to do\n      if (refreshWorked) {\n        return;\n      }\n      // if refresh didn't work, we destroy it and continue, so new cell renderer created below\n      destroyCellRenderer();\n    }\n    const promise = compDetails.newAgStackInstance();\n    ;\n    if (!promise) {\n      return;\n    }\n    const comp = promise.resolveNow(null, x => x); // js comps are never async\n    if (!comp) {\n      return;\n    }\n    const compGui = comp.getGui();\n    if (!compGui) {\n      return;\n    }\n    const parent = showTools ? eCellValue : eGui.current;\n    parent.appendChild(compGui);\n    jsCellRendererRef.current = comp;\n  }, [showDetails, showTools, cellValueVersion]);\n  // this effect makes sure destroyCellRenderer gets called when the\n  // component is destroyed. as the other effect only updates when there\n  // is a change in state\n  useEffectOnce(() => {\n    return destroyCellRenderer;\n  });\n};\nexport default useJsCellRenderer;","map":{"version":3,"names":["useCallback","useContext","useEffect","BeansContext","useEffectOnce","useJsCellRenderer","showDetails","showTools","eCellValue","cellValueVersion","jsCellRendererRef","eGui","context","userComponentFactory","destroyCellRenderer","comp","current","compGui","getGui","parentElement","removeChild","destroyBean","undefined","showValue","jsCompDetails","compDetails","componentFromFramework","waitingForToolsSetup","showComp","attemptRefresh","refresh","force","refreshResult","params","refreshWorked","promise","newAgStackInstance","resolveNow","x","parent","appendChild"],"sources":["/home/vvdn/React-practice/hello/node_modules/ag-grid-react/lib/reactUi/cells/showJsRenderer.mjs"],"sourcesContent":["// ag-grid-react v30.0.4\nimport { useCallback, useContext, useEffect } from 'react';\nimport { BeansContext } from '../beansContext.mjs';\nimport { useEffectOnce } from '../useEffectOnce.mjs';\nconst useJsCellRenderer = (showDetails, showTools, eCellValue, cellValueVersion, jsCellRendererRef, eGui) => {\n    const { context, userComponentFactory } = useContext(BeansContext);\n    const destroyCellRenderer = useCallback(() => {\n        const comp = jsCellRendererRef.current;\n        if (!comp) {\n            return;\n        }\n        const compGui = comp.getGui();\n        if (compGui && compGui.parentElement) {\n            compGui.parentElement.removeChild(compGui);\n        }\n        context.destroyBean(comp);\n        jsCellRendererRef.current = undefined;\n    }, []);\n    // create or refresh JS cell renderer\n    useEffect(() => {\n        const showValue = showDetails != null;\n        const jsCompDetails = showDetails && showDetails.compDetails && !showDetails.compDetails.componentFromFramework;\n        const waitingForToolsSetup = showTools && eCellValue == null;\n        const showComp = showValue && jsCompDetails && !waitingForToolsSetup;\n        // if not showing comp, destroy any existing one and return\n        if (!showComp) {\n            destroyCellRenderer();\n            return;\n        }\n        const compDetails = showDetails.compDetails;\n        if (jsCellRendererRef.current) {\n            // attempt refresh if refresh method exists\n            const comp = jsCellRendererRef.current;\n            const attemptRefresh = comp.refresh != null && showDetails.force == false;\n            const refreshResult = attemptRefresh ? comp.refresh(compDetails.params) : false;\n            const refreshWorked = refreshResult === true || refreshResult === undefined;\n            // if refresh worked, nothing else to do\n            if (refreshWorked) {\n                return;\n            }\n            // if refresh didn't work, we destroy it and continue, so new cell renderer created below\n            destroyCellRenderer();\n        }\n        const promise = compDetails.newAgStackInstance();\n        ;\n        if (!promise) {\n            return;\n        }\n        const comp = promise.resolveNow(null, x => x); // js comps are never async\n        if (!comp) {\n            return;\n        }\n        const compGui = comp.getGui();\n        if (!compGui) {\n            return;\n        }\n        const parent = showTools ? eCellValue : eGui.current;\n        parent.appendChild(compGui);\n        jsCellRendererRef.current = comp;\n    }, [showDetails, showTools, cellValueVersion]);\n    // this effect makes sure destroyCellRenderer gets called when the\n    // component is destroyed. as the other effect only updates when there\n    // is a change in state\n    useEffectOnce(() => {\n        return destroyCellRenderer;\n    });\n};\nexport default useJsCellRenderer;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}